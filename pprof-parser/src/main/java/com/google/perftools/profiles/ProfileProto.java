// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: profile.proto
// Protobuf Java Version: 4.30.2

package com.google.perftools.profiles;

public final class ProfileProto {
  private ProfileProto() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 30,
      /* patch= */ 2,
      /* suffix= */ "",
      ProfileProto.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ProfileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perftools.profiles.Profile)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    java.util.List<com.google.perftools.profiles.ProfileProto.ValueType> 
        getSampleTypeList();
    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    com.google.perftools.profiles.ProfileProto.ValueType getSampleType(int index);
    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    int getSampleTypeCount();
    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    java.util.List<? extends com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder> 
        getSampleTypeOrBuilderList();
    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder getSampleTypeOrBuilder(
        int index);

    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    java.util.List<com.google.perftools.profiles.ProfileProto.Sample> 
        getSampleList();
    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    com.google.perftools.profiles.ProfileProto.Sample getSample(int index);
    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    int getSampleCount();
    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    java.util.List<? extends com.google.perftools.profiles.ProfileProto.SampleOrBuilder> 
        getSampleOrBuilderList();
    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    com.google.perftools.profiles.ProfileProto.SampleOrBuilder getSampleOrBuilder(
        int index);

    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    java.util.List<com.google.perftools.profiles.ProfileProto.Mapping> 
        getMappingList();
    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    com.google.perftools.profiles.ProfileProto.Mapping getMapping(int index);
    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    int getMappingCount();
    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    java.util.List<? extends com.google.perftools.profiles.ProfileProto.MappingOrBuilder> 
        getMappingOrBuilderList();
    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    com.google.perftools.profiles.ProfileProto.MappingOrBuilder getMappingOrBuilder(
        int index);

    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    java.util.List<com.google.perftools.profiles.ProfileProto.Location> 
        getLocationList();
    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    com.google.perftools.profiles.ProfileProto.Location getLocation(int index);
    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    int getLocationCount();
    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    java.util.List<? extends com.google.perftools.profiles.ProfileProto.LocationOrBuilder> 
        getLocationOrBuilderList();
    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    com.google.perftools.profiles.ProfileProto.LocationOrBuilder getLocationOrBuilder(
        int index);

    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    java.util.List<com.google.perftools.profiles.ProfileProto.Function> 
        getFunctionList();
    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    com.google.perftools.profiles.ProfileProto.Function getFunction(int index);
    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    int getFunctionCount();
    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    java.util.List<? extends com.google.perftools.profiles.ProfileProto.FunctionOrBuilder> 
        getFunctionOrBuilderList();
    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    com.google.perftools.profiles.ProfileProto.FunctionOrBuilder getFunctionOrBuilder(
        int index);

    /**
     * <pre>
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     * </pre>
     *
     * <code>repeated string string_table = 6;</code>
     * @return A list containing the stringTable.
     */
    java.util.List<java.lang.String>
        getStringTableList();
    /**
     * <pre>
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     * </pre>
     *
     * <code>repeated string string_table = 6;</code>
     * @return The count of stringTable.
     */
    int getStringTableCount();
    /**
     * <pre>
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     * </pre>
     *
     * <code>repeated string string_table = 6;</code>
     * @param index The index of the element to return.
     * @return The stringTable at the given index.
     */
    java.lang.String getStringTable(int index);
    /**
     * <pre>
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     * </pre>
     *
     * <code>repeated string string_table = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the stringTable at the given index.
     */
    com.google.protobuf.ByteString
        getStringTableBytes(int index);

    /**
     * <pre>
     * frames with Function.function_name fully matching the following
     * regexp will be dropped from the samples, along with their successors.
     * </pre>
     *
     * <code>int64 drop_frames = 7;</code>
     * @return The dropFrames.
     */
    long getDropFrames();

    /**
     * <pre>
     * frames with Function.function_name fully matching the following
     * regexp will be kept, even if it matches drop_frames.
     * </pre>
     *
     * <code>int64 keep_frames = 8;</code>
     * @return The keepFrames.
     */
    long getKeepFrames();

    /**
     * <pre>
     * Time of collection (UTC) represented as nanoseconds past the epoch.
     * </pre>
     *
     * <code>int64 time_nanos = 9;</code>
     * @return The timeNanos.
     */
    long getTimeNanos();

    /**
     * <pre>
     * Duration of the profile, if a duration makes sense.
     * </pre>
     *
     * <code>int64 duration_nanos = 10;</code>
     * @return The durationNanos.
     */
    long getDurationNanos();

    /**
     * <pre>
     * The kind of events between sampled occurrences.
     * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     * </pre>
     *
     * <code>.perftools.profiles.ValueType period_type = 11;</code>
     * @return Whether the periodType field is set.
     */
    boolean hasPeriodType();
    /**
     * <pre>
     * The kind of events between sampled occurrences.
     * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     * </pre>
     *
     * <code>.perftools.profiles.ValueType period_type = 11;</code>
     * @return The periodType.
     */
    com.google.perftools.profiles.ProfileProto.ValueType getPeriodType();
    /**
     * <pre>
     * The kind of events between sampled occurrences.
     * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     * </pre>
     *
     * <code>.perftools.profiles.ValueType period_type = 11;</code>
     */
    com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder getPeriodTypeOrBuilder();

    /**
     * <pre>
     * The number of events between sampled occurrences.
     * </pre>
     *
     * <code>int64 period = 12;</code>
     * @return The period.
     */
    long getPeriod();

    /**
     * <pre>
     * Free-form text associated with the profile. The text is displayed as is
     * to the user by the tools that read profiles (e.g. by pprof). This field
     * should not be used to store any machine-readable information, it is only
     * for human-friendly content. The profile must stay functional if this field
     * is cleaned.
     * </pre>
     *
     * <code>repeated int64 comment = 13;</code>
     * @return A list containing the comment.
     */
    java.util.List<java.lang.Long> getCommentList();
    /**
     * <pre>
     * Free-form text associated with the profile. The text is displayed as is
     * to the user by the tools that read profiles (e.g. by pprof). This field
     * should not be used to store any machine-readable information, it is only
     * for human-friendly content. The profile must stay functional if this field
     * is cleaned.
     * </pre>
     *
     * <code>repeated int64 comment = 13;</code>
     * @return The count of comment.
     */
    int getCommentCount();
    /**
     * <pre>
     * Free-form text associated with the profile. The text is displayed as is
     * to the user by the tools that read profiles (e.g. by pprof). This field
     * should not be used to store any machine-readable information, it is only
     * for human-friendly content. The profile must stay functional if this field
     * is cleaned.
     * </pre>
     *
     * <code>repeated int64 comment = 13;</code>
     * @param index The index of the element to return.
     * @return The comment at the given index.
     */
    long getComment(int index);

    /**
     * <pre>
     * Index into the string table of the type of the preferred sample
     * value. If unset, clients should default to the last sample value.
     * </pre>
     *
     * <code>int64 default_sample_type = 14;</code>
     * @return The defaultSampleType.
     */
    long getDefaultSampleType();

    /**
     * <pre>
     * Documentation link for this profile. The URL must be absolute,
     * e.g., http://pprof.example.com/cpu-profile.html
     *
     * The URL may be missing if the profile was generated by older code or code
     * that did not bother to supply a link.
     * </pre>
     *
     * <code>int64 doc_url = 15;</code>
     * @return The docUrl.
     */
    long getDocUrl();
  }
  /**
   * Protobuf type {@code perftools.profiles.Profile}
   */
  public static final class Profile extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perftools.profiles.Profile)
      ProfileOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 30,
        /* patch= */ 2,
        /* suffix= */ "",
        Profile.class.getName());
    }
    // Use Profile.newBuilder() to construct.
    private Profile(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Profile() {
      sampleType_ = java.util.Collections.emptyList();
      sample_ = java.util.Collections.emptyList();
      mapping_ = java.util.Collections.emptyList();
      location_ = java.util.Collections.emptyList();
      function_ = java.util.Collections.emptyList();
      stringTable_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      comment_ = emptyLongList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Profile_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Profile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.perftools.profiles.ProfileProto.Profile.class, com.google.perftools.profiles.ProfileProto.Profile.Builder.class);
    }

    private int bitField0_;
    public static final int SAMPLE_TYPE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.google.perftools.profiles.ProfileProto.ValueType> sampleType_;
    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.perftools.profiles.ProfileProto.ValueType> getSampleTypeList() {
      return sampleType_;
    }
    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder> 
        getSampleTypeOrBuilderList() {
      return sampleType_;
    }
    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    @java.lang.Override
    public int getSampleTypeCount() {
      return sampleType_.size();
    }
    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.ValueType getSampleType(int index) {
      return sampleType_.get(index);
    }
    /**
     * <pre>
     * A description of the samples associated with each Sample.value.
     * For a cpu profile this might be:
     * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
     * For a heap profile, this might be:
     * [["allocations","count"], ["space","bytes"]],
     * If one of the values represents the number of events represented
     * by the sample, by convention it should be at index 0 and use
     * sample_type.unit == "count".
     * </pre>
     *
     * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder getSampleTypeOrBuilder(
        int index) {
      return sampleType_.get(index);
    }

    public static final int SAMPLE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.google.perftools.profiles.ProfileProto.Sample> sample_;
    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.perftools.profiles.ProfileProto.Sample> getSampleList() {
      return sample_;
    }
    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.perftools.profiles.ProfileProto.SampleOrBuilder> 
        getSampleOrBuilderList() {
      return sample_;
    }
    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    @java.lang.Override
    public int getSampleCount() {
      return sample_.size();
    }
    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Sample getSample(int index) {
      return sample_.get(index);
    }
    /**
     * <pre>
     * The set of samples recorded in this profile.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Sample sample = 2;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.SampleOrBuilder getSampleOrBuilder(
        int index) {
      return sample_.get(index);
    }

    public static final int MAPPING_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<com.google.perftools.profiles.ProfileProto.Mapping> mapping_;
    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.perftools.profiles.ProfileProto.Mapping> getMappingList() {
      return mapping_;
    }
    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.perftools.profiles.ProfileProto.MappingOrBuilder> 
        getMappingOrBuilderList() {
      return mapping_;
    }
    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    @java.lang.Override
    public int getMappingCount() {
      return mapping_.size();
    }
    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Mapping getMapping(int index) {
      return mapping_.get(index);
    }
    /**
     * <pre>
     * Mapping from address ranges to the image/binary/library mapped
     * into that address range.  mapping[0] will be the main binary.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.MappingOrBuilder getMappingOrBuilder(
        int index) {
      return mapping_.get(index);
    }

    public static final int LOCATION_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<com.google.perftools.profiles.ProfileProto.Location> location_;
    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.perftools.profiles.ProfileProto.Location> getLocationList() {
      return location_;
    }
    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.perftools.profiles.ProfileProto.LocationOrBuilder> 
        getLocationOrBuilderList() {
      return location_;
    }
    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    @java.lang.Override
    public int getLocationCount() {
      return location_.size();
    }
    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Location getLocation(int index) {
      return location_.get(index);
    }
    /**
     * <pre>
     * Locations referenced by samples.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Location location = 4;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.LocationOrBuilder getLocationOrBuilder(
        int index) {
      return location_.get(index);
    }

    public static final int FUNCTION_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<com.google.perftools.profiles.ProfileProto.Function> function_;
    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.perftools.profiles.ProfileProto.Function> getFunctionList() {
      return function_;
    }
    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.perftools.profiles.ProfileProto.FunctionOrBuilder> 
        getFunctionOrBuilderList() {
      return function_;
    }
    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    @java.lang.Override
    public int getFunctionCount() {
      return function_.size();
    }
    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Function getFunction(int index) {
      return function_.get(index);
    }
    /**
     * <pre>
     * Functions referenced by locations.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Function function = 5;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.FunctionOrBuilder getFunctionOrBuilder(
        int index) {
      return function_.get(index);
    }

    public static final int STRING_TABLE_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList stringTable_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     * </pre>
     *
     * <code>repeated string string_table = 6;</code>
     * @return A list containing the stringTable.
     */
    public com.google.protobuf.ProtocolStringList
        getStringTableList() {
      return stringTable_;
    }
    /**
     * <pre>
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     * </pre>
     *
     * <code>repeated string string_table = 6;</code>
     * @return The count of stringTable.
     */
    public int getStringTableCount() {
      return stringTable_.size();
    }
    /**
     * <pre>
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     * </pre>
     *
     * <code>repeated string string_table = 6;</code>
     * @param index The index of the element to return.
     * @return The stringTable at the given index.
     */
    public java.lang.String getStringTable(int index) {
      return stringTable_.get(index);
    }
    /**
     * <pre>
     * A common table for strings referenced by various messages.
     * string_table[0] must always be "".
     * </pre>
     *
     * <code>repeated string string_table = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the stringTable at the given index.
     */
    public com.google.protobuf.ByteString
        getStringTableBytes(int index) {
      return stringTable_.getByteString(index);
    }

    public static final int DROP_FRAMES_FIELD_NUMBER = 7;
    private long dropFrames_ = 0L;
    /**
     * <pre>
     * frames with Function.function_name fully matching the following
     * regexp will be dropped from the samples, along with their successors.
     * </pre>
     *
     * <code>int64 drop_frames = 7;</code>
     * @return The dropFrames.
     */
    @java.lang.Override
    public long getDropFrames() {
      return dropFrames_;
    }

    public static final int KEEP_FRAMES_FIELD_NUMBER = 8;
    private long keepFrames_ = 0L;
    /**
     * <pre>
     * frames with Function.function_name fully matching the following
     * regexp will be kept, even if it matches drop_frames.
     * </pre>
     *
     * <code>int64 keep_frames = 8;</code>
     * @return The keepFrames.
     */
    @java.lang.Override
    public long getKeepFrames() {
      return keepFrames_;
    }

    public static final int TIME_NANOS_FIELD_NUMBER = 9;
    private long timeNanos_ = 0L;
    /**
     * <pre>
     * Time of collection (UTC) represented as nanoseconds past the epoch.
     * </pre>
     *
     * <code>int64 time_nanos = 9;</code>
     * @return The timeNanos.
     */
    @java.lang.Override
    public long getTimeNanos() {
      return timeNanos_;
    }

    public static final int DURATION_NANOS_FIELD_NUMBER = 10;
    private long durationNanos_ = 0L;
    /**
     * <pre>
     * Duration of the profile, if a duration makes sense.
     * </pre>
     *
     * <code>int64 duration_nanos = 10;</code>
     * @return The durationNanos.
     */
    @java.lang.Override
    public long getDurationNanos() {
      return durationNanos_;
    }

    public static final int PERIOD_TYPE_FIELD_NUMBER = 11;
    private com.google.perftools.profiles.ProfileProto.ValueType periodType_;
    /**
     * <pre>
     * The kind of events between sampled occurrences.
     * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     * </pre>
     *
     * <code>.perftools.profiles.ValueType period_type = 11;</code>
     * @return Whether the periodType field is set.
     */
    @java.lang.Override
    public boolean hasPeriodType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The kind of events between sampled occurrences.
     * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     * </pre>
     *
     * <code>.perftools.profiles.ValueType period_type = 11;</code>
     * @return The periodType.
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.ValueType getPeriodType() {
      return periodType_ == null ? com.google.perftools.profiles.ProfileProto.ValueType.getDefaultInstance() : periodType_;
    }
    /**
     * <pre>
     * The kind of events between sampled occurrences.
     * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
     * </pre>
     *
     * <code>.perftools.profiles.ValueType period_type = 11;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder getPeriodTypeOrBuilder() {
      return periodType_ == null ? com.google.perftools.profiles.ProfileProto.ValueType.getDefaultInstance() : periodType_;
    }

    public static final int PERIOD_FIELD_NUMBER = 12;
    private long period_ = 0L;
    /**
     * <pre>
     * The number of events between sampled occurrences.
     * </pre>
     *
     * <code>int64 period = 12;</code>
     * @return The period.
     */
    @java.lang.Override
    public long getPeriod() {
      return period_;
    }

    public static final int COMMENT_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList comment_ =
        emptyLongList();
    /**
     * <pre>
     * Free-form text associated with the profile. The text is displayed as is
     * to the user by the tools that read profiles (e.g. by pprof). This field
     * should not be used to store any machine-readable information, it is only
     * for human-friendly content. The profile must stay functional if this field
     * is cleaned.
     * </pre>
     *
     * <code>repeated int64 comment = 13;</code>
     * @return A list containing the comment.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getCommentList() {
      return comment_;
    }
    /**
     * <pre>
     * Free-form text associated with the profile. The text is displayed as is
     * to the user by the tools that read profiles (e.g. by pprof). This field
     * should not be used to store any machine-readable information, it is only
     * for human-friendly content. The profile must stay functional if this field
     * is cleaned.
     * </pre>
     *
     * <code>repeated int64 comment = 13;</code>
     * @return The count of comment.
     */
    public int getCommentCount() {
      return comment_.size();
    }
    /**
     * <pre>
     * Free-form text associated with the profile. The text is displayed as is
     * to the user by the tools that read profiles (e.g. by pprof). This field
     * should not be used to store any machine-readable information, it is only
     * for human-friendly content. The profile must stay functional if this field
     * is cleaned.
     * </pre>
     *
     * <code>repeated int64 comment = 13;</code>
     * @param index The index of the element to return.
     * @return The comment at the given index.
     */
    public long getComment(int index) {
      return comment_.getLong(index);
    }
    private int commentMemoizedSerializedSize = -1;

    public static final int DEFAULT_SAMPLE_TYPE_FIELD_NUMBER = 14;
    private long defaultSampleType_ = 0L;
    /**
     * <pre>
     * Index into the string table of the type of the preferred sample
     * value. If unset, clients should default to the last sample value.
     * </pre>
     *
     * <code>int64 default_sample_type = 14;</code>
     * @return The defaultSampleType.
     */
    @java.lang.Override
    public long getDefaultSampleType() {
      return defaultSampleType_;
    }

    public static final int DOC_URL_FIELD_NUMBER = 15;
    private long docUrl_ = 0L;
    /**
     * <pre>
     * Documentation link for this profile. The URL must be absolute,
     * e.g., http://pprof.example.com/cpu-profile.html
     *
     * The URL may be missing if the profile was generated by older code or code
     * that did not bother to supply a link.
     * </pre>
     *
     * <code>int64 doc_url = 15;</code>
     * @return The docUrl.
     */
    @java.lang.Override
    public long getDocUrl() {
      return docUrl_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < sampleType_.size(); i++) {
        output.writeMessage(1, sampleType_.get(i));
      }
      for (int i = 0; i < sample_.size(); i++) {
        output.writeMessage(2, sample_.get(i));
      }
      for (int i = 0; i < mapping_.size(); i++) {
        output.writeMessage(3, mapping_.get(i));
      }
      for (int i = 0; i < location_.size(); i++) {
        output.writeMessage(4, location_.get(i));
      }
      for (int i = 0; i < function_.size(); i++) {
        output.writeMessage(5, function_.get(i));
      }
      for (int i = 0; i < stringTable_.size(); i++) {
        com.google.protobuf.GeneratedMessage.writeString(output, 6, stringTable_.getRaw(i));
      }
      if (dropFrames_ != 0L) {
        output.writeInt64(7, dropFrames_);
      }
      if (keepFrames_ != 0L) {
        output.writeInt64(8, keepFrames_);
      }
      if (timeNanos_ != 0L) {
        output.writeInt64(9, timeNanos_);
      }
      if (durationNanos_ != 0L) {
        output.writeInt64(10, durationNanos_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(11, getPeriodType());
      }
      if (period_ != 0L) {
        output.writeInt64(12, period_);
      }
      if (getCommentList().size() > 0) {
        output.writeUInt32NoTag(106);
        output.writeUInt32NoTag(commentMemoizedSerializedSize);
      }
      for (int i = 0; i < comment_.size(); i++) {
        output.writeInt64NoTag(comment_.getLong(i));
      }
      if (defaultSampleType_ != 0L) {
        output.writeInt64(14, defaultSampleType_);
      }
      if (docUrl_ != 0L) {
        output.writeInt64(15, docUrl_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sampleType_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sampleType_.get(i));
      }
      for (int i = 0; i < sample_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, sample_.get(i));
      }
      for (int i = 0; i < mapping_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, mapping_.get(i));
      }
      for (int i = 0; i < location_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, location_.get(i));
      }
      for (int i = 0; i < function_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, function_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stringTable_.size(); i++) {
          dataSize += computeStringSizeNoTag(stringTable_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getStringTableList().size();
      }
      if (dropFrames_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, dropFrames_);
      }
      if (keepFrames_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, keepFrames_);
      }
      if (timeNanos_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, timeNanos_);
      }
      if (durationNanos_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, durationNanos_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getPeriodType());
      }
      if (period_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(12, period_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < comment_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(comment_.getLong(i));
        }
        size += dataSize;
        if (!getCommentList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        commentMemoizedSerializedSize = dataSize;
      }
      if (defaultSampleType_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, defaultSampleType_);
      }
      if (docUrl_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(15, docUrl_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.perftools.profiles.ProfileProto.Profile)) {
        return super.equals(obj);
      }
      com.google.perftools.profiles.ProfileProto.Profile other = (com.google.perftools.profiles.ProfileProto.Profile) obj;

      if (!getSampleTypeList()
          .equals(other.getSampleTypeList())) return false;
      if (!getSampleList()
          .equals(other.getSampleList())) return false;
      if (!getMappingList()
          .equals(other.getMappingList())) return false;
      if (!getLocationList()
          .equals(other.getLocationList())) return false;
      if (!getFunctionList()
          .equals(other.getFunctionList())) return false;
      if (!getStringTableList()
          .equals(other.getStringTableList())) return false;
      if (getDropFrames()
          != other.getDropFrames()) return false;
      if (getKeepFrames()
          != other.getKeepFrames()) return false;
      if (getTimeNanos()
          != other.getTimeNanos()) return false;
      if (getDurationNanos()
          != other.getDurationNanos()) return false;
      if (hasPeriodType() != other.hasPeriodType()) return false;
      if (hasPeriodType()) {
        if (!getPeriodType()
            .equals(other.getPeriodType())) return false;
      }
      if (getPeriod()
          != other.getPeriod()) return false;
      if (!getCommentList()
          .equals(other.getCommentList())) return false;
      if (getDefaultSampleType()
          != other.getDefaultSampleType()) return false;
      if (getDocUrl()
          != other.getDocUrl()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSampleTypeCount() > 0) {
        hash = (37 * hash) + SAMPLE_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getSampleTypeList().hashCode();
      }
      if (getSampleCount() > 0) {
        hash = (37 * hash) + SAMPLE_FIELD_NUMBER;
        hash = (53 * hash) + getSampleList().hashCode();
      }
      if (getMappingCount() > 0) {
        hash = (37 * hash) + MAPPING_FIELD_NUMBER;
        hash = (53 * hash) + getMappingList().hashCode();
      }
      if (getLocationCount() > 0) {
        hash = (37 * hash) + LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getLocationList().hashCode();
      }
      if (getFunctionCount() > 0) {
        hash = (37 * hash) + FUNCTION_FIELD_NUMBER;
        hash = (53 * hash) + getFunctionList().hashCode();
      }
      if (getStringTableCount() > 0) {
        hash = (37 * hash) + STRING_TABLE_FIELD_NUMBER;
        hash = (53 * hash) + getStringTableList().hashCode();
      }
      hash = (37 * hash) + DROP_FRAMES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDropFrames());
      hash = (37 * hash) + KEEP_FRAMES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getKeepFrames());
      hash = (37 * hash) + TIME_NANOS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimeNanos());
      hash = (37 * hash) + DURATION_NANOS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDurationNanos());
      if (hasPeriodType()) {
        hash = (37 * hash) + PERIOD_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getPeriodType().hashCode();
      }
      hash = (37 * hash) + PERIOD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getPeriod());
      if (getCommentCount() > 0) {
        hash = (37 * hash) + COMMENT_FIELD_NUMBER;
        hash = (53 * hash) + getCommentList().hashCode();
      }
      hash = (37 * hash) + DEFAULT_SAMPLE_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDefaultSampleType());
      hash = (37 * hash) + DOC_URL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDocUrl());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.perftools.profiles.ProfileProto.Profile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.perftools.profiles.ProfileProto.Profile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Profile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.perftools.profiles.ProfileProto.Profile prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perftools.profiles.Profile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perftools.profiles.Profile)
        com.google.perftools.profiles.ProfileProto.ProfileOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Profile_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Profile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.perftools.profiles.ProfileProto.Profile.class, com.google.perftools.profiles.ProfileProto.Profile.Builder.class);
      }

      // Construct using com.google.perftools.profiles.ProfileProto.Profile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          internalGetSampleTypeFieldBuilder();
          internalGetSampleFieldBuilder();
          internalGetMappingFieldBuilder();
          internalGetLocationFieldBuilder();
          internalGetFunctionFieldBuilder();
          internalGetPeriodTypeFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (sampleTypeBuilder_ == null) {
          sampleType_ = java.util.Collections.emptyList();
        } else {
          sampleType_ = null;
          sampleTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (sampleBuilder_ == null) {
          sample_ = java.util.Collections.emptyList();
        } else {
          sample_ = null;
          sampleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (mappingBuilder_ == null) {
          mapping_ = java.util.Collections.emptyList();
        } else {
          mapping_ = null;
          mappingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (locationBuilder_ == null) {
          location_ = java.util.Collections.emptyList();
        } else {
          location_ = null;
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
        } else {
          function_ = null;
          functionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        stringTable_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        dropFrames_ = 0L;
        keepFrames_ = 0L;
        timeNanos_ = 0L;
        durationNanos_ = 0L;
        periodType_ = null;
        if (periodTypeBuilder_ != null) {
          periodTypeBuilder_.dispose();
          periodTypeBuilder_ = null;
        }
        period_ = 0L;
        comment_ = emptyLongList();
        defaultSampleType_ = 0L;
        docUrl_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Profile_descriptor;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Profile getDefaultInstanceForType() {
        return com.google.perftools.profiles.ProfileProto.Profile.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Profile build() {
        com.google.perftools.profiles.ProfileProto.Profile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Profile buildPartial() {
        com.google.perftools.profiles.ProfileProto.Profile result = new com.google.perftools.profiles.ProfileProto.Profile(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.google.perftools.profiles.ProfileProto.Profile result) {
        if (sampleTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sampleType_ = java.util.Collections.unmodifiableList(sampleType_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sampleType_ = sampleType_;
        } else {
          result.sampleType_ = sampleTypeBuilder_.build();
        }
        if (sampleBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            sample_ = java.util.Collections.unmodifiableList(sample_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.sample_ = sample_;
        } else {
          result.sample_ = sampleBuilder_.build();
        }
        if (mappingBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            mapping_ = java.util.Collections.unmodifiableList(mapping_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.mapping_ = mapping_;
        } else {
          result.mapping_ = mappingBuilder_.build();
        }
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            location_ = java.util.Collections.unmodifiableList(location_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.location_ = location_;
        } else {
          result.location_ = locationBuilder_.build();
        }
        if (functionBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            function_ = java.util.Collections.unmodifiableList(function_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.function_ = function_;
        } else {
          result.function_ = functionBuilder_.build();
        }
      }

      private void buildPartial0(com.google.perftools.profiles.ProfileProto.Profile result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000020) != 0)) {
          stringTable_.makeImmutable();
          result.stringTable_ = stringTable_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.dropFrames_ = dropFrames_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.keepFrames_ = keepFrames_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.timeNanos_ = timeNanos_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.durationNanos_ = durationNanos_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.periodType_ = periodTypeBuilder_ == null
              ? periodType_
              : periodTypeBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.period_ = period_;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          comment_.makeImmutable();
          result.comment_ = comment_;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.defaultSampleType_ = defaultSampleType_;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.docUrl_ = docUrl_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.perftools.profiles.ProfileProto.Profile) {
          return mergeFrom((com.google.perftools.profiles.ProfileProto.Profile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.perftools.profiles.ProfileProto.Profile other) {
        if (other == com.google.perftools.profiles.ProfileProto.Profile.getDefaultInstance()) return this;
        if (sampleTypeBuilder_ == null) {
          if (!other.sampleType_.isEmpty()) {
            if (sampleType_.isEmpty()) {
              sampleType_ = other.sampleType_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSampleTypeIsMutable();
              sampleType_.addAll(other.sampleType_);
            }
            onChanged();
          }
        } else {
          if (!other.sampleType_.isEmpty()) {
            if (sampleTypeBuilder_.isEmpty()) {
              sampleTypeBuilder_.dispose();
              sampleTypeBuilder_ = null;
              sampleType_ = other.sampleType_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sampleTypeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetSampleTypeFieldBuilder() : null;
            } else {
              sampleTypeBuilder_.addAllMessages(other.sampleType_);
            }
          }
        }
        if (sampleBuilder_ == null) {
          if (!other.sample_.isEmpty()) {
            if (sample_.isEmpty()) {
              sample_ = other.sample_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSampleIsMutable();
              sample_.addAll(other.sample_);
            }
            onChanged();
          }
        } else {
          if (!other.sample_.isEmpty()) {
            if (sampleBuilder_.isEmpty()) {
              sampleBuilder_.dispose();
              sampleBuilder_ = null;
              sample_ = other.sample_;
              bitField0_ = (bitField0_ & ~0x00000002);
              sampleBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetSampleFieldBuilder() : null;
            } else {
              sampleBuilder_.addAllMessages(other.sample_);
            }
          }
        }
        if (mappingBuilder_ == null) {
          if (!other.mapping_.isEmpty()) {
            if (mapping_.isEmpty()) {
              mapping_ = other.mapping_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureMappingIsMutable();
              mapping_.addAll(other.mapping_);
            }
            onChanged();
          }
        } else {
          if (!other.mapping_.isEmpty()) {
            if (mappingBuilder_.isEmpty()) {
              mappingBuilder_.dispose();
              mappingBuilder_ = null;
              mapping_ = other.mapping_;
              bitField0_ = (bitField0_ & ~0x00000004);
              mappingBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetMappingFieldBuilder() : null;
            } else {
              mappingBuilder_.addAllMessages(other.mapping_);
            }
          }
        }
        if (locationBuilder_ == null) {
          if (!other.location_.isEmpty()) {
            if (location_.isEmpty()) {
              location_ = other.location_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureLocationIsMutable();
              location_.addAll(other.location_);
            }
            onChanged();
          }
        } else {
          if (!other.location_.isEmpty()) {
            if (locationBuilder_.isEmpty()) {
              locationBuilder_.dispose();
              locationBuilder_ = null;
              location_ = other.location_;
              bitField0_ = (bitField0_ & ~0x00000008);
              locationBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetLocationFieldBuilder() : null;
            } else {
              locationBuilder_.addAllMessages(other.location_);
            }
          }
        }
        if (functionBuilder_ == null) {
          if (!other.function_.isEmpty()) {
            if (function_.isEmpty()) {
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureFunctionIsMutable();
              function_.addAll(other.function_);
            }
            onChanged();
          }
        } else {
          if (!other.function_.isEmpty()) {
            if (functionBuilder_.isEmpty()) {
              functionBuilder_.dispose();
              functionBuilder_ = null;
              function_ = other.function_;
              bitField0_ = (bitField0_ & ~0x00000010);
              functionBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetFunctionFieldBuilder() : null;
            } else {
              functionBuilder_.addAllMessages(other.function_);
            }
          }
        }
        if (!other.stringTable_.isEmpty()) {
          if (stringTable_.isEmpty()) {
            stringTable_ = other.stringTable_;
            bitField0_ |= 0x00000020;
          } else {
            ensureStringTableIsMutable();
            stringTable_.addAll(other.stringTable_);
          }
          onChanged();
        }
        if (other.getDropFrames() != 0L) {
          setDropFrames(other.getDropFrames());
        }
        if (other.getKeepFrames() != 0L) {
          setKeepFrames(other.getKeepFrames());
        }
        if (other.getTimeNanos() != 0L) {
          setTimeNanos(other.getTimeNanos());
        }
        if (other.getDurationNanos() != 0L) {
          setDurationNanos(other.getDurationNanos());
        }
        if (other.hasPeriodType()) {
          mergePeriodType(other.getPeriodType());
        }
        if (other.getPeriod() != 0L) {
          setPeriod(other.getPeriod());
        }
        if (!other.comment_.isEmpty()) {
          if (comment_.isEmpty()) {
            comment_ = other.comment_;
            comment_.makeImmutable();
            bitField0_ |= 0x00001000;
          } else {
            ensureCommentIsMutable();
            comment_.addAll(other.comment_);
          }
          onChanged();
        }
        if (other.getDefaultSampleType() != 0L) {
          setDefaultSampleType(other.getDefaultSampleType());
        }
        if (other.getDocUrl() != 0L) {
          setDocUrl(other.getDocUrl());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.perftools.profiles.ProfileProto.ValueType m =
                    input.readMessage(
                        com.google.perftools.profiles.ProfileProto.ValueType.parser(),
                        extensionRegistry);
                if (sampleTypeBuilder_ == null) {
                  ensureSampleTypeIsMutable();
                  sampleType_.add(m);
                } else {
                  sampleTypeBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                com.google.perftools.profiles.ProfileProto.Sample m =
                    input.readMessage(
                        com.google.perftools.profiles.ProfileProto.Sample.parser(),
                        extensionRegistry);
                if (sampleBuilder_ == null) {
                  ensureSampleIsMutable();
                  sample_.add(m);
                } else {
                  sampleBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                com.google.perftools.profiles.ProfileProto.Mapping m =
                    input.readMessage(
                        com.google.perftools.profiles.ProfileProto.Mapping.parser(),
                        extensionRegistry);
                if (mappingBuilder_ == null) {
                  ensureMappingIsMutable();
                  mapping_.add(m);
                } else {
                  mappingBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                com.google.perftools.profiles.ProfileProto.Location m =
                    input.readMessage(
                        com.google.perftools.profiles.ProfileProto.Location.parser(),
                        extensionRegistry);
                if (locationBuilder_ == null) {
                  ensureLocationIsMutable();
                  location_.add(m);
                } else {
                  locationBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                com.google.perftools.profiles.ProfileProto.Function m =
                    input.readMessage(
                        com.google.perftools.profiles.ProfileProto.Function.parser(),
                        extensionRegistry);
                if (functionBuilder_ == null) {
                  ensureFunctionIsMutable();
                  function_.add(m);
                } else {
                  functionBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 50: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureStringTableIsMutable();
                stringTable_.add(s);
                break;
              } // case 50
              case 56: {
                dropFrames_ = input.readInt64();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                keepFrames_ = input.readInt64();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                timeNanos_ = input.readInt64();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 80: {
                durationNanos_ = input.readInt64();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              case 90: {
                input.readMessage(
                    internalGetPeriodTypeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000400;
                break;
              } // case 90
              case 96: {
                period_ = input.readInt64();
                bitField0_ |= 0x00000800;
                break;
              } // case 96
              case 104: {
                long v = input.readInt64();
                ensureCommentIsMutable();
                comment_.addLong(v);
                break;
              } // case 104
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureCommentIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  comment_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 106
              case 112: {
                defaultSampleType_ = input.readInt64();
                bitField0_ |= 0x00002000;
                break;
              } // case 112
              case 120: {
                docUrl_ = input.readInt64();
                bitField0_ |= 0x00004000;
                break;
              } // case 120
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.google.perftools.profiles.ProfileProto.ValueType> sampleType_ =
        java.util.Collections.emptyList();
      private void ensureSampleTypeIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sampleType_ = new java.util.ArrayList<com.google.perftools.profiles.ProfileProto.ValueType>(sampleType_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.ValueType, com.google.perftools.profiles.ProfileProto.ValueType.Builder, com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder> sampleTypeBuilder_;

      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.ValueType> getSampleTypeList() {
        if (sampleTypeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sampleType_);
        } else {
          return sampleTypeBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public int getSampleTypeCount() {
        if (sampleTypeBuilder_ == null) {
          return sampleType_.size();
        } else {
          return sampleTypeBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public com.google.perftools.profiles.ProfileProto.ValueType getSampleType(int index) {
        if (sampleTypeBuilder_ == null) {
          return sampleType_.get(index);
        } else {
          return sampleTypeBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public Builder setSampleType(
          int index, com.google.perftools.profiles.ProfileProto.ValueType value) {
        if (sampleTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSampleTypeIsMutable();
          sampleType_.set(index, value);
          onChanged();
        } else {
          sampleTypeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public Builder setSampleType(
          int index, com.google.perftools.profiles.ProfileProto.ValueType.Builder builderForValue) {
        if (sampleTypeBuilder_ == null) {
          ensureSampleTypeIsMutable();
          sampleType_.set(index, builderForValue.build());
          onChanged();
        } else {
          sampleTypeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public Builder addSampleType(com.google.perftools.profiles.ProfileProto.ValueType value) {
        if (sampleTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSampleTypeIsMutable();
          sampleType_.add(value);
          onChanged();
        } else {
          sampleTypeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public Builder addSampleType(
          int index, com.google.perftools.profiles.ProfileProto.ValueType value) {
        if (sampleTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSampleTypeIsMutable();
          sampleType_.add(index, value);
          onChanged();
        } else {
          sampleTypeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public Builder addSampleType(
          com.google.perftools.profiles.ProfileProto.ValueType.Builder builderForValue) {
        if (sampleTypeBuilder_ == null) {
          ensureSampleTypeIsMutable();
          sampleType_.add(builderForValue.build());
          onChanged();
        } else {
          sampleTypeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public Builder addSampleType(
          int index, com.google.perftools.profiles.ProfileProto.ValueType.Builder builderForValue) {
        if (sampleTypeBuilder_ == null) {
          ensureSampleTypeIsMutable();
          sampleType_.add(index, builderForValue.build());
          onChanged();
        } else {
          sampleTypeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public Builder addAllSampleType(
          java.lang.Iterable<? extends com.google.perftools.profiles.ProfileProto.ValueType> values) {
        if (sampleTypeBuilder_ == null) {
          ensureSampleTypeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sampleType_);
          onChanged();
        } else {
          sampleTypeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public Builder clearSampleType() {
        if (sampleTypeBuilder_ == null) {
          sampleType_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sampleTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public Builder removeSampleType(int index) {
        if (sampleTypeBuilder_ == null) {
          ensureSampleTypeIsMutable();
          sampleType_.remove(index);
          onChanged();
        } else {
          sampleTypeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public com.google.perftools.profiles.ProfileProto.ValueType.Builder getSampleTypeBuilder(
          int index) {
        return internalGetSampleTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder getSampleTypeOrBuilder(
          int index) {
        if (sampleTypeBuilder_ == null) {
          return sampleType_.get(index);  } else {
          return sampleTypeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public java.util.List<? extends com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder> 
           getSampleTypeOrBuilderList() {
        if (sampleTypeBuilder_ != null) {
          return sampleTypeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sampleType_);
        }
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public com.google.perftools.profiles.ProfileProto.ValueType.Builder addSampleTypeBuilder() {
        return internalGetSampleTypeFieldBuilder().addBuilder(
            com.google.perftools.profiles.ProfileProto.ValueType.getDefaultInstance());
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public com.google.perftools.profiles.ProfileProto.ValueType.Builder addSampleTypeBuilder(
          int index) {
        return internalGetSampleTypeFieldBuilder().addBuilder(
            index, com.google.perftools.profiles.ProfileProto.ValueType.getDefaultInstance());
      }
      /**
       * <pre>
       * A description of the samples associated with each Sample.value.
       * For a cpu profile this might be:
       * [["cpu","nanoseconds"]] or [["wall","seconds"]] or [["syscall","count"]]
       * For a heap profile, this might be:
       * [["allocations","count"], ["space","bytes"]],
       * If one of the values represents the number of events represented
       * by the sample, by convention it should be at index 0 and use
       * sample_type.unit == "count".
       * </pre>
       *
       * <code>repeated .perftools.profiles.ValueType sample_type = 1;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.ValueType.Builder> 
           getSampleTypeBuilderList() {
        return internalGetSampleTypeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.ValueType, com.google.perftools.profiles.ProfileProto.ValueType.Builder, com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder> 
          internalGetSampleTypeFieldBuilder() {
        if (sampleTypeBuilder_ == null) {
          sampleTypeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.perftools.profiles.ProfileProto.ValueType, com.google.perftools.profiles.ProfileProto.ValueType.Builder, com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder>(
                  sampleType_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sampleType_ = null;
        }
        return sampleTypeBuilder_;
      }

      private java.util.List<com.google.perftools.profiles.ProfileProto.Sample> sample_ =
        java.util.Collections.emptyList();
      private void ensureSampleIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          sample_ = new java.util.ArrayList<com.google.perftools.profiles.ProfileProto.Sample>(sample_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Sample, com.google.perftools.profiles.ProfileProto.Sample.Builder, com.google.perftools.profiles.ProfileProto.SampleOrBuilder> sampleBuilder_;

      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Sample> getSampleList() {
        if (sampleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sample_);
        } else {
          return sampleBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public int getSampleCount() {
        if (sampleBuilder_ == null) {
          return sample_.size();
        } else {
          return sampleBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Sample getSample(int index) {
        if (sampleBuilder_ == null) {
          return sample_.get(index);
        } else {
          return sampleBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public Builder setSample(
          int index, com.google.perftools.profiles.ProfileProto.Sample value) {
        if (sampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSampleIsMutable();
          sample_.set(index, value);
          onChanged();
        } else {
          sampleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public Builder setSample(
          int index, com.google.perftools.profiles.ProfileProto.Sample.Builder builderForValue) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          sample_.set(index, builderForValue.build());
          onChanged();
        } else {
          sampleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public Builder addSample(com.google.perftools.profiles.ProfileProto.Sample value) {
        if (sampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSampleIsMutable();
          sample_.add(value);
          onChanged();
        } else {
          sampleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public Builder addSample(
          int index, com.google.perftools.profiles.ProfileProto.Sample value) {
        if (sampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSampleIsMutable();
          sample_.add(index, value);
          onChanged();
        } else {
          sampleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public Builder addSample(
          com.google.perftools.profiles.ProfileProto.Sample.Builder builderForValue) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          sample_.add(builderForValue.build());
          onChanged();
        } else {
          sampleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public Builder addSample(
          int index, com.google.perftools.profiles.ProfileProto.Sample.Builder builderForValue) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          sample_.add(index, builderForValue.build());
          onChanged();
        } else {
          sampleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public Builder addAllSample(
          java.lang.Iterable<? extends com.google.perftools.profiles.ProfileProto.Sample> values) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sample_);
          onChanged();
        } else {
          sampleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public Builder clearSample() {
        if (sampleBuilder_ == null) {
          sample_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          sampleBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public Builder removeSample(int index) {
        if (sampleBuilder_ == null) {
          ensureSampleIsMutable();
          sample_.remove(index);
          onChanged();
        } else {
          sampleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Sample.Builder getSampleBuilder(
          int index) {
        return internalGetSampleFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public com.google.perftools.profiles.ProfileProto.SampleOrBuilder getSampleOrBuilder(
          int index) {
        if (sampleBuilder_ == null) {
          return sample_.get(index);  } else {
          return sampleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public java.util.List<? extends com.google.perftools.profiles.ProfileProto.SampleOrBuilder> 
           getSampleOrBuilderList() {
        if (sampleBuilder_ != null) {
          return sampleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sample_);
        }
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Sample.Builder addSampleBuilder() {
        return internalGetSampleFieldBuilder().addBuilder(
            com.google.perftools.profiles.ProfileProto.Sample.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Sample.Builder addSampleBuilder(
          int index) {
        return internalGetSampleFieldBuilder().addBuilder(
            index, com.google.perftools.profiles.ProfileProto.Sample.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of samples recorded in this profile.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Sample sample = 2;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Sample.Builder> 
           getSampleBuilderList() {
        return internalGetSampleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Sample, com.google.perftools.profiles.ProfileProto.Sample.Builder, com.google.perftools.profiles.ProfileProto.SampleOrBuilder> 
          internalGetSampleFieldBuilder() {
        if (sampleBuilder_ == null) {
          sampleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.perftools.profiles.ProfileProto.Sample, com.google.perftools.profiles.ProfileProto.Sample.Builder, com.google.perftools.profiles.ProfileProto.SampleOrBuilder>(
                  sample_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          sample_ = null;
        }
        return sampleBuilder_;
      }

      private java.util.List<com.google.perftools.profiles.ProfileProto.Mapping> mapping_ =
        java.util.Collections.emptyList();
      private void ensureMappingIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          mapping_ = new java.util.ArrayList<com.google.perftools.profiles.ProfileProto.Mapping>(mapping_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Mapping, com.google.perftools.profiles.ProfileProto.Mapping.Builder, com.google.perftools.profiles.ProfileProto.MappingOrBuilder> mappingBuilder_;

      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Mapping> getMappingList() {
        if (mappingBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mapping_);
        } else {
          return mappingBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public int getMappingCount() {
        if (mappingBuilder_ == null) {
          return mapping_.size();
        } else {
          return mappingBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Mapping getMapping(int index) {
        if (mappingBuilder_ == null) {
          return mapping_.get(index);
        } else {
          return mappingBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public Builder setMapping(
          int index, com.google.perftools.profiles.ProfileProto.Mapping value) {
        if (mappingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMappingIsMutable();
          mapping_.set(index, value);
          onChanged();
        } else {
          mappingBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public Builder setMapping(
          int index, com.google.perftools.profiles.ProfileProto.Mapping.Builder builderForValue) {
        if (mappingBuilder_ == null) {
          ensureMappingIsMutable();
          mapping_.set(index, builderForValue.build());
          onChanged();
        } else {
          mappingBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public Builder addMapping(com.google.perftools.profiles.ProfileProto.Mapping value) {
        if (mappingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMappingIsMutable();
          mapping_.add(value);
          onChanged();
        } else {
          mappingBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public Builder addMapping(
          int index, com.google.perftools.profiles.ProfileProto.Mapping value) {
        if (mappingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMappingIsMutable();
          mapping_.add(index, value);
          onChanged();
        } else {
          mappingBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public Builder addMapping(
          com.google.perftools.profiles.ProfileProto.Mapping.Builder builderForValue) {
        if (mappingBuilder_ == null) {
          ensureMappingIsMutable();
          mapping_.add(builderForValue.build());
          onChanged();
        } else {
          mappingBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public Builder addMapping(
          int index, com.google.perftools.profiles.ProfileProto.Mapping.Builder builderForValue) {
        if (mappingBuilder_ == null) {
          ensureMappingIsMutable();
          mapping_.add(index, builderForValue.build());
          onChanged();
        } else {
          mappingBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public Builder addAllMapping(
          java.lang.Iterable<? extends com.google.perftools.profiles.ProfileProto.Mapping> values) {
        if (mappingBuilder_ == null) {
          ensureMappingIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, mapping_);
          onChanged();
        } else {
          mappingBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public Builder clearMapping() {
        if (mappingBuilder_ == null) {
          mapping_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          mappingBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public Builder removeMapping(int index) {
        if (mappingBuilder_ == null) {
          ensureMappingIsMutable();
          mapping_.remove(index);
          onChanged();
        } else {
          mappingBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Mapping.Builder getMappingBuilder(
          int index) {
        return internalGetMappingFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.MappingOrBuilder getMappingOrBuilder(
          int index) {
        if (mappingBuilder_ == null) {
          return mapping_.get(index);  } else {
          return mappingBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public java.util.List<? extends com.google.perftools.profiles.ProfileProto.MappingOrBuilder> 
           getMappingOrBuilderList() {
        if (mappingBuilder_ != null) {
          return mappingBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mapping_);
        }
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Mapping.Builder addMappingBuilder() {
        return internalGetMappingFieldBuilder().addBuilder(
            com.google.perftools.profiles.ProfileProto.Mapping.getDefaultInstance());
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Mapping.Builder addMappingBuilder(
          int index) {
        return internalGetMappingFieldBuilder().addBuilder(
            index, com.google.perftools.profiles.ProfileProto.Mapping.getDefaultInstance());
      }
      /**
       * <pre>
       * Mapping from address ranges to the image/binary/library mapped
       * into that address range.  mapping[0] will be the main binary.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Mapping mapping = 3;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Mapping.Builder> 
           getMappingBuilderList() {
        return internalGetMappingFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Mapping, com.google.perftools.profiles.ProfileProto.Mapping.Builder, com.google.perftools.profiles.ProfileProto.MappingOrBuilder> 
          internalGetMappingFieldBuilder() {
        if (mappingBuilder_ == null) {
          mappingBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.perftools.profiles.ProfileProto.Mapping, com.google.perftools.profiles.ProfileProto.Mapping.Builder, com.google.perftools.profiles.ProfileProto.MappingOrBuilder>(
                  mapping_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          mapping_ = null;
        }
        return mappingBuilder_;
      }

      private java.util.List<com.google.perftools.profiles.ProfileProto.Location> location_ =
        java.util.Collections.emptyList();
      private void ensureLocationIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          location_ = new java.util.ArrayList<com.google.perftools.profiles.ProfileProto.Location>(location_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Location, com.google.perftools.profiles.ProfileProto.Location.Builder, com.google.perftools.profiles.ProfileProto.LocationOrBuilder> locationBuilder_;

      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Location> getLocationList() {
        if (locationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(location_);
        } else {
          return locationBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public int getLocationCount() {
        if (locationBuilder_ == null) {
          return location_.size();
        } else {
          return locationBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Location getLocation(int index) {
        if (locationBuilder_ == null) {
          return location_.get(index);
        } else {
          return locationBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public Builder setLocation(
          int index, com.google.perftools.profiles.ProfileProto.Location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLocationIsMutable();
          location_.set(index, value);
          onChanged();
        } else {
          locationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public Builder setLocation(
          int index, com.google.perftools.profiles.ProfileProto.Location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          ensureLocationIsMutable();
          location_.set(index, builderForValue.build());
          onChanged();
        } else {
          locationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public Builder addLocation(com.google.perftools.profiles.ProfileProto.Location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLocationIsMutable();
          location_.add(value);
          onChanged();
        } else {
          locationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public Builder addLocation(
          int index, com.google.perftools.profiles.ProfileProto.Location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLocationIsMutable();
          location_.add(index, value);
          onChanged();
        } else {
          locationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public Builder addLocation(
          com.google.perftools.profiles.ProfileProto.Location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          ensureLocationIsMutable();
          location_.add(builderForValue.build());
          onChanged();
        } else {
          locationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public Builder addLocation(
          int index, com.google.perftools.profiles.ProfileProto.Location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          ensureLocationIsMutable();
          location_.add(index, builderForValue.build());
          onChanged();
        } else {
          locationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public Builder addAllLocation(
          java.lang.Iterable<? extends com.google.perftools.profiles.ProfileProto.Location> values) {
        if (locationBuilder_ == null) {
          ensureLocationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, location_);
          onChanged();
        } else {
          locationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public Builder clearLocation() {
        if (locationBuilder_ == null) {
          location_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          locationBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public Builder removeLocation(int index) {
        if (locationBuilder_ == null) {
          ensureLocationIsMutable();
          location_.remove(index);
          onChanged();
        } else {
          locationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Location.Builder getLocationBuilder(
          int index) {
        return internalGetLocationFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.LocationOrBuilder getLocationOrBuilder(
          int index) {
        if (locationBuilder_ == null) {
          return location_.get(index);  } else {
          return locationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public java.util.List<? extends com.google.perftools.profiles.ProfileProto.LocationOrBuilder> 
           getLocationOrBuilderList() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(location_);
        }
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Location.Builder addLocationBuilder() {
        return internalGetLocationFieldBuilder().addBuilder(
            com.google.perftools.profiles.ProfileProto.Location.getDefaultInstance());
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Location.Builder addLocationBuilder(
          int index) {
        return internalGetLocationFieldBuilder().addBuilder(
            index, com.google.perftools.profiles.ProfileProto.Location.getDefaultInstance());
      }
      /**
       * <pre>
       * Locations referenced by samples.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Location location = 4;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Location.Builder> 
           getLocationBuilderList() {
        return internalGetLocationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Location, com.google.perftools.profiles.ProfileProto.Location.Builder, com.google.perftools.profiles.ProfileProto.LocationOrBuilder> 
          internalGetLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.perftools.profiles.ProfileProto.Location, com.google.perftools.profiles.ProfileProto.Location.Builder, com.google.perftools.profiles.ProfileProto.LocationOrBuilder>(
                  location_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      private java.util.List<com.google.perftools.profiles.ProfileProto.Function> function_ =
        java.util.Collections.emptyList();
      private void ensureFunctionIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          function_ = new java.util.ArrayList<com.google.perftools.profiles.ProfileProto.Function>(function_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Function, com.google.perftools.profiles.ProfileProto.Function.Builder, com.google.perftools.profiles.ProfileProto.FunctionOrBuilder> functionBuilder_;

      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Function> getFunctionList() {
        if (functionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(function_);
        } else {
          return functionBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public int getFunctionCount() {
        if (functionBuilder_ == null) {
          return function_.size();
        } else {
          return functionBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Function getFunction(int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);
        } else {
          return functionBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public Builder setFunction(
          int index, com.google.perftools.profiles.ProfileProto.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.set(index, value);
          onChanged();
        } else {
          functionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public Builder setFunction(
          int index, com.google.perftools.profiles.ProfileProto.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.set(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public Builder addFunction(com.google.perftools.profiles.ProfileProto.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(value);
          onChanged();
        } else {
          functionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public Builder addFunction(
          int index, com.google.perftools.profiles.ProfileProto.Function value) {
        if (functionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFunctionIsMutable();
          function_.add(index, value);
          onChanged();
        } else {
          functionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public Builder addFunction(
          com.google.perftools.profiles.ProfileProto.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public Builder addFunction(
          int index, com.google.perftools.profiles.ProfileProto.Function.Builder builderForValue) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.add(index, builderForValue.build());
          onChanged();
        } else {
          functionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public Builder addAllFunction(
          java.lang.Iterable<? extends com.google.perftools.profiles.ProfileProto.Function> values) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, function_);
          onChanged();
        } else {
          functionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public Builder clearFunction() {
        if (functionBuilder_ == null) {
          function_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          functionBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public Builder removeFunction(int index) {
        if (functionBuilder_ == null) {
          ensureFunctionIsMutable();
          function_.remove(index);
          onChanged();
        } else {
          functionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Function.Builder getFunctionBuilder(
          int index) {
        return internalGetFunctionFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public com.google.perftools.profiles.ProfileProto.FunctionOrBuilder getFunctionOrBuilder(
          int index) {
        if (functionBuilder_ == null) {
          return function_.get(index);  } else {
          return functionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public java.util.List<? extends com.google.perftools.profiles.ProfileProto.FunctionOrBuilder> 
           getFunctionOrBuilderList() {
        if (functionBuilder_ != null) {
          return functionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(function_);
        }
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Function.Builder addFunctionBuilder() {
        return internalGetFunctionFieldBuilder().addBuilder(
            com.google.perftools.profiles.ProfileProto.Function.getDefaultInstance());
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Function.Builder addFunctionBuilder(
          int index) {
        return internalGetFunctionFieldBuilder().addBuilder(
            index, com.google.perftools.profiles.ProfileProto.Function.getDefaultInstance());
      }
      /**
       * <pre>
       * Functions referenced by locations.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Function function = 5;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Function.Builder> 
           getFunctionBuilderList() {
        return internalGetFunctionFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Function, com.google.perftools.profiles.ProfileProto.Function.Builder, com.google.perftools.profiles.ProfileProto.FunctionOrBuilder> 
          internalGetFunctionFieldBuilder() {
        if (functionBuilder_ == null) {
          functionBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.perftools.profiles.ProfileProto.Function, com.google.perftools.profiles.ProfileProto.Function.Builder, com.google.perftools.profiles.ProfileProto.FunctionOrBuilder>(
                  function_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          function_ = null;
        }
        return functionBuilder_;
      }

      private com.google.protobuf.LazyStringArrayList stringTable_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureStringTableIsMutable() {
        if (!stringTable_.isModifiable()) {
          stringTable_ = new com.google.protobuf.LazyStringArrayList(stringTable_);
        }
        bitField0_ |= 0x00000020;
      }
      /**
       * <pre>
       * A common table for strings referenced by various messages.
       * string_table[0] must always be "".
       * </pre>
       *
       * <code>repeated string string_table = 6;</code>
       * @return A list containing the stringTable.
       */
      public com.google.protobuf.ProtocolStringList
          getStringTableList() {
        stringTable_.makeImmutable();
        return stringTable_;
      }
      /**
       * <pre>
       * A common table for strings referenced by various messages.
       * string_table[0] must always be "".
       * </pre>
       *
       * <code>repeated string string_table = 6;</code>
       * @return The count of stringTable.
       */
      public int getStringTableCount() {
        return stringTable_.size();
      }
      /**
       * <pre>
       * A common table for strings referenced by various messages.
       * string_table[0] must always be "".
       * </pre>
       *
       * <code>repeated string string_table = 6;</code>
       * @param index The index of the element to return.
       * @return The stringTable at the given index.
       */
      public java.lang.String getStringTable(int index) {
        return stringTable_.get(index);
      }
      /**
       * <pre>
       * A common table for strings referenced by various messages.
       * string_table[0] must always be "".
       * </pre>
       *
       * <code>repeated string string_table = 6;</code>
       * @param index The index of the value to return.
       * @return The bytes of the stringTable at the given index.
       */
      public com.google.protobuf.ByteString
          getStringTableBytes(int index) {
        return stringTable_.getByteString(index);
      }
      /**
       * <pre>
       * A common table for strings referenced by various messages.
       * string_table[0] must always be "".
       * </pre>
       *
       * <code>repeated string string_table = 6;</code>
       * @param index The index to set the value at.
       * @param value The stringTable to set.
       * @return This builder for chaining.
       */
      public Builder setStringTable(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringTableIsMutable();
        stringTable_.set(index, value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A common table for strings referenced by various messages.
       * string_table[0] must always be "".
       * </pre>
       *
       * <code>repeated string string_table = 6;</code>
       * @param value The stringTable to add.
       * @return This builder for chaining.
       */
      public Builder addStringTable(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringTableIsMutable();
        stringTable_.add(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A common table for strings referenced by various messages.
       * string_table[0] must always be "".
       * </pre>
       *
       * <code>repeated string string_table = 6;</code>
       * @param values The stringTable to add.
       * @return This builder for chaining.
       */
      public Builder addAllStringTable(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringTableIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stringTable_);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A common table for strings referenced by various messages.
       * string_table[0] must always be "".
       * </pre>
       *
       * <code>repeated string string_table = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearStringTable() {
        stringTable_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A common table for strings referenced by various messages.
       * string_table[0] must always be "".
       * </pre>
       *
       * <code>repeated string string_table = 6;</code>
       * @param value The bytes of the stringTable to add.
       * @return This builder for chaining.
       */
      public Builder addStringTableBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureStringTableIsMutable();
        stringTable_.add(value);
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      private long dropFrames_ ;
      /**
       * <pre>
       * frames with Function.function_name fully matching the following
       * regexp will be dropped from the samples, along with their successors.
       * </pre>
       *
       * <code>int64 drop_frames = 7;</code>
       * @return The dropFrames.
       */
      @java.lang.Override
      public long getDropFrames() {
        return dropFrames_;
      }
      /**
       * <pre>
       * frames with Function.function_name fully matching the following
       * regexp will be dropped from the samples, along with their successors.
       * </pre>
       *
       * <code>int64 drop_frames = 7;</code>
       * @param value The dropFrames to set.
       * @return This builder for chaining.
       */
      public Builder setDropFrames(long value) {

        dropFrames_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * frames with Function.function_name fully matching the following
       * regexp will be dropped from the samples, along with their successors.
       * </pre>
       *
       * <code>int64 drop_frames = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearDropFrames() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dropFrames_ = 0L;
        onChanged();
        return this;
      }

      private long keepFrames_ ;
      /**
       * <pre>
       * frames with Function.function_name fully matching the following
       * regexp will be kept, even if it matches drop_frames.
       * </pre>
       *
       * <code>int64 keep_frames = 8;</code>
       * @return The keepFrames.
       */
      @java.lang.Override
      public long getKeepFrames() {
        return keepFrames_;
      }
      /**
       * <pre>
       * frames with Function.function_name fully matching the following
       * regexp will be kept, even if it matches drop_frames.
       * </pre>
       *
       * <code>int64 keep_frames = 8;</code>
       * @param value The keepFrames to set.
       * @return This builder for chaining.
       */
      public Builder setKeepFrames(long value) {

        keepFrames_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * frames with Function.function_name fully matching the following
       * regexp will be kept, even if it matches drop_frames.
       * </pre>
       *
       * <code>int64 keep_frames = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeepFrames() {
        bitField0_ = (bitField0_ & ~0x00000080);
        keepFrames_ = 0L;
        onChanged();
        return this;
      }

      private long timeNanos_ ;
      /**
       * <pre>
       * Time of collection (UTC) represented as nanoseconds past the epoch.
       * </pre>
       *
       * <code>int64 time_nanos = 9;</code>
       * @return The timeNanos.
       */
      @java.lang.Override
      public long getTimeNanos() {
        return timeNanos_;
      }
      /**
       * <pre>
       * Time of collection (UTC) represented as nanoseconds past the epoch.
       * </pre>
       *
       * <code>int64 time_nanos = 9;</code>
       * @param value The timeNanos to set.
       * @return This builder for chaining.
       */
      public Builder setTimeNanos(long value) {

        timeNanos_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Time of collection (UTC) represented as nanoseconds past the epoch.
       * </pre>
       *
       * <code>int64 time_nanos = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeNanos() {
        bitField0_ = (bitField0_ & ~0x00000100);
        timeNanos_ = 0L;
        onChanged();
        return this;
      }

      private long durationNanos_ ;
      /**
       * <pre>
       * Duration of the profile, if a duration makes sense.
       * </pre>
       *
       * <code>int64 duration_nanos = 10;</code>
       * @return The durationNanos.
       */
      @java.lang.Override
      public long getDurationNanos() {
        return durationNanos_;
      }
      /**
       * <pre>
       * Duration of the profile, if a duration makes sense.
       * </pre>
       *
       * <code>int64 duration_nanos = 10;</code>
       * @param value The durationNanos to set.
       * @return This builder for chaining.
       */
      public Builder setDurationNanos(long value) {

        durationNanos_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Duration of the profile, if a duration makes sense.
       * </pre>
       *
       * <code>int64 duration_nanos = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearDurationNanos() {
        bitField0_ = (bitField0_ & ~0x00000200);
        durationNanos_ = 0L;
        onChanged();
        return this;
      }

      private com.google.perftools.profiles.ProfileProto.ValueType periodType_;
      private com.google.protobuf.SingleFieldBuilder<
          com.google.perftools.profiles.ProfileProto.ValueType, com.google.perftools.profiles.ProfileProto.ValueType.Builder, com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder> periodTypeBuilder_;
      /**
       * <pre>
       * The kind of events between sampled occurrences.
       * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
       * </pre>
       *
       * <code>.perftools.profiles.ValueType period_type = 11;</code>
       * @return Whether the periodType field is set.
       */
      public boolean hasPeriodType() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * The kind of events between sampled occurrences.
       * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
       * </pre>
       *
       * <code>.perftools.profiles.ValueType period_type = 11;</code>
       * @return The periodType.
       */
      public com.google.perftools.profiles.ProfileProto.ValueType getPeriodType() {
        if (periodTypeBuilder_ == null) {
          return periodType_ == null ? com.google.perftools.profiles.ProfileProto.ValueType.getDefaultInstance() : periodType_;
        } else {
          return periodTypeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The kind of events between sampled occurrences.
       * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
       * </pre>
       *
       * <code>.perftools.profiles.ValueType period_type = 11;</code>
       */
      public Builder setPeriodType(com.google.perftools.profiles.ProfileProto.ValueType value) {
        if (periodTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          periodType_ = value;
        } else {
          periodTypeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The kind of events between sampled occurrences.
       * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
       * </pre>
       *
       * <code>.perftools.profiles.ValueType period_type = 11;</code>
       */
      public Builder setPeriodType(
          com.google.perftools.profiles.ProfileProto.ValueType.Builder builderForValue) {
        if (periodTypeBuilder_ == null) {
          periodType_ = builderForValue.build();
        } else {
          periodTypeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The kind of events between sampled occurrences.
       * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
       * </pre>
       *
       * <code>.perftools.profiles.ValueType period_type = 11;</code>
       */
      public Builder mergePeriodType(com.google.perftools.profiles.ProfileProto.ValueType value) {
        if (periodTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0) &&
            periodType_ != null &&
            periodType_ != com.google.perftools.profiles.ProfileProto.ValueType.getDefaultInstance()) {
            getPeriodTypeBuilder().mergeFrom(value);
          } else {
            periodType_ = value;
          }
        } else {
          periodTypeBuilder_.mergeFrom(value);
        }
        if (periodType_ != null) {
          bitField0_ |= 0x00000400;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The kind of events between sampled occurrences.
       * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
       * </pre>
       *
       * <code>.perftools.profiles.ValueType period_type = 11;</code>
       */
      public Builder clearPeriodType() {
        bitField0_ = (bitField0_ & ~0x00000400);
        periodType_ = null;
        if (periodTypeBuilder_ != null) {
          periodTypeBuilder_.dispose();
          periodTypeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The kind of events between sampled occurrences.
       * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
       * </pre>
       *
       * <code>.perftools.profiles.ValueType period_type = 11;</code>
       */
      public com.google.perftools.profiles.ProfileProto.ValueType.Builder getPeriodTypeBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return internalGetPeriodTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The kind of events between sampled occurrences.
       * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
       * </pre>
       *
       * <code>.perftools.profiles.ValueType period_type = 11;</code>
       */
      public com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder getPeriodTypeOrBuilder() {
        if (periodTypeBuilder_ != null) {
          return periodTypeBuilder_.getMessageOrBuilder();
        } else {
          return periodType_ == null ?
              com.google.perftools.profiles.ProfileProto.ValueType.getDefaultInstance() : periodType_;
        }
      }
      /**
       * <pre>
       * The kind of events between sampled occurrences.
       * e.g [ "cpu","cycles" ] or [ "heap","bytes" ]
       * </pre>
       *
       * <code>.perftools.profiles.ValueType period_type = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.google.perftools.profiles.ProfileProto.ValueType, com.google.perftools.profiles.ProfileProto.ValueType.Builder, com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder> 
          internalGetPeriodTypeFieldBuilder() {
        if (periodTypeBuilder_ == null) {
          periodTypeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.google.perftools.profiles.ProfileProto.ValueType, com.google.perftools.profiles.ProfileProto.ValueType.Builder, com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder>(
                  getPeriodType(),
                  getParentForChildren(),
                  isClean());
          periodType_ = null;
        }
        return periodTypeBuilder_;
      }

      private long period_ ;
      /**
       * <pre>
       * The number of events between sampled occurrences.
       * </pre>
       *
       * <code>int64 period = 12;</code>
       * @return The period.
       */
      @java.lang.Override
      public long getPeriod() {
        return period_;
      }
      /**
       * <pre>
       * The number of events between sampled occurrences.
       * </pre>
       *
       * <code>int64 period = 12;</code>
       * @param value The period to set.
       * @return This builder for chaining.
       */
      public Builder setPeriod(long value) {

        period_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of events between sampled occurrences.
       * </pre>
       *
       * <code>int64 period = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearPeriod() {
        bitField0_ = (bitField0_ & ~0x00000800);
        period_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList comment_ = emptyLongList();
      private void ensureCommentIsMutable() {
        if (!comment_.isModifiable()) {
          comment_ = makeMutableCopy(comment_);
        }
        bitField0_ |= 0x00001000;
      }
      /**
       * <pre>
       * Free-form text associated with the profile. The text is displayed as is
       * to the user by the tools that read profiles (e.g. by pprof). This field
       * should not be used to store any machine-readable information, it is only
       * for human-friendly content. The profile must stay functional if this field
       * is cleaned.
       * </pre>
       *
       * <code>repeated int64 comment = 13;</code>
       * @return A list containing the comment.
       */
      public java.util.List<java.lang.Long>
          getCommentList() {
        comment_.makeImmutable();
        return comment_;
      }
      /**
       * <pre>
       * Free-form text associated with the profile. The text is displayed as is
       * to the user by the tools that read profiles (e.g. by pprof). This field
       * should not be used to store any machine-readable information, it is only
       * for human-friendly content. The profile must stay functional if this field
       * is cleaned.
       * </pre>
       *
       * <code>repeated int64 comment = 13;</code>
       * @return The count of comment.
       */
      public int getCommentCount() {
        return comment_.size();
      }
      /**
       * <pre>
       * Free-form text associated with the profile. The text is displayed as is
       * to the user by the tools that read profiles (e.g. by pprof). This field
       * should not be used to store any machine-readable information, it is only
       * for human-friendly content. The profile must stay functional if this field
       * is cleaned.
       * </pre>
       *
       * <code>repeated int64 comment = 13;</code>
       * @param index The index of the element to return.
       * @return The comment at the given index.
       */
      public long getComment(int index) {
        return comment_.getLong(index);
      }
      /**
       * <pre>
       * Free-form text associated with the profile. The text is displayed as is
       * to the user by the tools that read profiles (e.g. by pprof). This field
       * should not be used to store any machine-readable information, it is only
       * for human-friendly content. The profile must stay functional if this field
       * is cleaned.
       * </pre>
       *
       * <code>repeated int64 comment = 13;</code>
       * @param index The index to set the value at.
       * @param value The comment to set.
       * @return This builder for chaining.
       */
      public Builder setComment(
          int index, long value) {

        ensureCommentIsMutable();
        comment_.setLong(index, value);
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Free-form text associated with the profile. The text is displayed as is
       * to the user by the tools that read profiles (e.g. by pprof). This field
       * should not be used to store any machine-readable information, it is only
       * for human-friendly content. The profile must stay functional if this field
       * is cleaned.
       * </pre>
       *
       * <code>repeated int64 comment = 13;</code>
       * @param value The comment to add.
       * @return This builder for chaining.
       */
      public Builder addComment(long value) {

        ensureCommentIsMutable();
        comment_.addLong(value);
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Free-form text associated with the profile. The text is displayed as is
       * to the user by the tools that read profiles (e.g. by pprof). This field
       * should not be used to store any machine-readable information, it is only
       * for human-friendly content. The profile must stay functional if this field
       * is cleaned.
       * </pre>
       *
       * <code>repeated int64 comment = 13;</code>
       * @param values The comment to add.
       * @return This builder for chaining.
       */
      public Builder addAllComment(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureCommentIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, comment_);
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Free-form text associated with the profile. The text is displayed as is
       * to the user by the tools that read profiles (e.g. by pprof). This field
       * should not be used to store any machine-readable information, it is only
       * for human-friendly content. The profile must stay functional if this field
       * is cleaned.
       * </pre>
       *
       * <code>repeated int64 comment = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearComment() {
        comment_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private long defaultSampleType_ ;
      /**
       * <pre>
       * Index into the string table of the type of the preferred sample
       * value. If unset, clients should default to the last sample value.
       * </pre>
       *
       * <code>int64 default_sample_type = 14;</code>
       * @return The defaultSampleType.
       */
      @java.lang.Override
      public long getDefaultSampleType() {
        return defaultSampleType_;
      }
      /**
       * <pre>
       * Index into the string table of the type of the preferred sample
       * value. If unset, clients should default to the last sample value.
       * </pre>
       *
       * <code>int64 default_sample_type = 14;</code>
       * @param value The defaultSampleType to set.
       * @return This builder for chaining.
       */
      public Builder setDefaultSampleType(long value) {

        defaultSampleType_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into the string table of the type of the preferred sample
       * value. If unset, clients should default to the last sample value.
       * </pre>
       *
       * <code>int64 default_sample_type = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearDefaultSampleType() {
        bitField0_ = (bitField0_ & ~0x00002000);
        defaultSampleType_ = 0L;
        onChanged();
        return this;
      }

      private long docUrl_ ;
      /**
       * <pre>
       * Documentation link for this profile. The URL must be absolute,
       * e.g., http://pprof.example.com/cpu-profile.html
       *
       * The URL may be missing if the profile was generated by older code or code
       * that did not bother to supply a link.
       * </pre>
       *
       * <code>int64 doc_url = 15;</code>
       * @return The docUrl.
       */
      @java.lang.Override
      public long getDocUrl() {
        return docUrl_;
      }
      /**
       * <pre>
       * Documentation link for this profile. The URL must be absolute,
       * e.g., http://pprof.example.com/cpu-profile.html
       *
       * The URL may be missing if the profile was generated by older code or code
       * that did not bother to supply a link.
       * </pre>
       *
       * <code>int64 doc_url = 15;</code>
       * @param value The docUrl to set.
       * @return This builder for chaining.
       */
      public Builder setDocUrl(long value) {

        docUrl_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Documentation link for this profile. The URL must be absolute,
       * e.g., http://pprof.example.com/cpu-profile.html
       *
       * The URL may be missing if the profile was generated by older code or code
       * that did not bother to supply a link.
       * </pre>
       *
       * <code>int64 doc_url = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearDocUrl() {
        bitField0_ = (bitField0_ & ~0x00004000);
        docUrl_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perftools.profiles.Profile)
    }

    // @@protoc_insertion_point(class_scope:perftools.profiles.Profile)
    private static final com.google.perftools.profiles.ProfileProto.Profile DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.perftools.profiles.ProfileProto.Profile();
    }

    public static com.google.perftools.profiles.ProfileProto.Profile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Profile>
        PARSER = new com.google.protobuf.AbstractParser<Profile>() {
      @java.lang.Override
      public Profile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Profile> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Profile> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Profile getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ValueTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perftools.profiles.ValueType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Index into string table.
     * </pre>
     *
     * <code>int64 type = 1;</code>
     * @return The type.
     */
    long getType();

    /**
     * <pre>
     * Index into string table.
     * </pre>
     *
     * <code>int64 unit = 2;</code>
     * @return The unit.
     */
    long getUnit();
  }
  /**
   * <pre>
   * ValueType describes the semantics and measurement units of a value.
   * </pre>
   *
   * Protobuf type {@code perftools.profiles.ValueType}
   */
  public static final class ValueType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perftools.profiles.ValueType)
      ValueTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 30,
        /* patch= */ 2,
        /* suffix= */ "",
        ValueType.class.getName());
    }
    // Use ValueType.newBuilder() to construct.
    private ValueType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ValueType() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_ValueType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_ValueType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.perftools.profiles.ProfileProto.ValueType.class, com.google.perftools.profiles.ProfileProto.ValueType.Builder.class);
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private long type_ = 0L;
    /**
     * <pre>
     * Index into string table.
     * </pre>
     *
     * <code>int64 type = 1;</code>
     * @return The type.
     */
    @java.lang.Override
    public long getType() {
      return type_;
    }

    public static final int UNIT_FIELD_NUMBER = 2;
    private long unit_ = 0L;
    /**
     * <pre>
     * Index into string table.
     * </pre>
     *
     * <code>int64 unit = 2;</code>
     * @return The unit.
     */
    @java.lang.Override
    public long getUnit() {
      return unit_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != 0L) {
        output.writeInt64(1, type_);
      }
      if (unit_ != 0L) {
        output.writeInt64(2, unit_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, type_);
      }
      if (unit_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, unit_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.perftools.profiles.ProfileProto.ValueType)) {
        return super.equals(obj);
      }
      com.google.perftools.profiles.ProfileProto.ValueType other = (com.google.perftools.profiles.ProfileProto.ValueType) obj;

      if (getType()
          != other.getType()) return false;
      if (getUnit()
          != other.getUnit()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getType());
      hash = (37 * hash) + UNIT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUnit());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.perftools.profiles.ProfileProto.ValueType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.perftools.profiles.ProfileProto.ValueType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.ValueType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.perftools.profiles.ProfileProto.ValueType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ValueType describes the semantics and measurement units of a value.
     * </pre>
     *
     * Protobuf type {@code perftools.profiles.ValueType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perftools.profiles.ValueType)
        com.google.perftools.profiles.ProfileProto.ValueTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_ValueType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_ValueType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.perftools.profiles.ProfileProto.ValueType.class, com.google.perftools.profiles.ProfileProto.ValueType.Builder.class);
      }

      // Construct using com.google.perftools.profiles.ProfileProto.ValueType.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0L;
        unit_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_ValueType_descriptor;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.ValueType getDefaultInstanceForType() {
        return com.google.perftools.profiles.ProfileProto.ValueType.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.ValueType build() {
        com.google.perftools.profiles.ProfileProto.ValueType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.ValueType buildPartial() {
        com.google.perftools.profiles.ProfileProto.ValueType result = new com.google.perftools.profiles.ProfileProto.ValueType(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.perftools.profiles.ProfileProto.ValueType result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.unit_ = unit_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.perftools.profiles.ProfileProto.ValueType) {
          return mergeFrom((com.google.perftools.profiles.ProfileProto.ValueType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.perftools.profiles.ProfileProto.ValueType other) {
        if (other == com.google.perftools.profiles.ProfileProto.ValueType.getDefaultInstance()) return this;
        if (other.getType() != 0L) {
          setType(other.getType());
        }
        if (other.getUnit() != 0L) {
          setUnit(other.getUnit());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                unit_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long type_ ;
      /**
       * <pre>
       * Index into string table.
       * </pre>
       *
       * <code>int64 type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public long getType() {
        return type_;
      }
      /**
       * <pre>
       * Index into string table.
       * </pre>
       *
       * <code>int64 type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(long value) {

        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into string table.
       * </pre>
       *
       * <code>int64 type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0L;
        onChanged();
        return this;
      }

      private long unit_ ;
      /**
       * <pre>
       * Index into string table.
       * </pre>
       *
       * <code>int64 unit = 2;</code>
       * @return The unit.
       */
      @java.lang.Override
      public long getUnit() {
        return unit_;
      }
      /**
       * <pre>
       * Index into string table.
       * </pre>
       *
       * <code>int64 unit = 2;</code>
       * @param value The unit to set.
       * @return This builder for chaining.
       */
      public Builder setUnit(long value) {

        unit_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into string table.
       * </pre>
       *
       * <code>int64 unit = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnit() {
        bitField0_ = (bitField0_ & ~0x00000002);
        unit_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perftools.profiles.ValueType)
    }

    // @@protoc_insertion_point(class_scope:perftools.profiles.ValueType)
    private static final com.google.perftools.profiles.ProfileProto.ValueType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.perftools.profiles.ProfileProto.ValueType();
    }

    public static com.google.perftools.profiles.ProfileProto.ValueType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ValueType>
        PARSER = new com.google.protobuf.AbstractParser<ValueType>() {
      @java.lang.Override
      public ValueType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ValueType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ValueType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.ValueType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SampleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perftools.profiles.Sample)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The ids recorded here correspond to a Profile.location.id.
     * The leaf is at location_id[0].
     * </pre>
     *
     * <code>repeated uint64 location_id = 1;</code>
     * @return A list containing the locationId.
     */
    java.util.List<java.lang.Long> getLocationIdList();
    /**
     * <pre>
     * The ids recorded here correspond to a Profile.location.id.
     * The leaf is at location_id[0].
     * </pre>
     *
     * <code>repeated uint64 location_id = 1;</code>
     * @return The count of locationId.
     */
    int getLocationIdCount();
    /**
     * <pre>
     * The ids recorded here correspond to a Profile.location.id.
     * The leaf is at location_id[0].
     * </pre>
     *
     * <code>repeated uint64 location_id = 1;</code>
     * @param index The index of the element to return.
     * @return The locationId at the given index.
     */
    long getLocationId(int index);

    /**
     * <pre>
     * The type and unit of each value is defined by the corresponding
     * entry in Profile.sample_type. All samples must have the same
     * number of values, the same as the length of Profile.sample_type.
     * When aggregating multiple samples into a single sample, the
     * result has a list of values that is the element-wise sum of the
     * lists of the originals.
     * </pre>
     *
     * <code>repeated int64 value = 2;</code>
     * @return A list containing the value.
     */
    java.util.List<java.lang.Long> getValueList();
    /**
     * <pre>
     * The type and unit of each value is defined by the corresponding
     * entry in Profile.sample_type. All samples must have the same
     * number of values, the same as the length of Profile.sample_type.
     * When aggregating multiple samples into a single sample, the
     * result has a list of values that is the element-wise sum of the
     * lists of the originals.
     * </pre>
     *
     * <code>repeated int64 value = 2;</code>
     * @return The count of value.
     */
    int getValueCount();
    /**
     * <pre>
     * The type and unit of each value is defined by the corresponding
     * entry in Profile.sample_type. All samples must have the same
     * number of values, the same as the length of Profile.sample_type.
     * When aggregating multiple samples into a single sample, the
     * result has a list of values that is the element-wise sum of the
     * lists of the originals.
     * </pre>
     *
     * <code>repeated int64 value = 2;</code>
     * @param index The index of the element to return.
     * @return The value at the given index.
     */
    long getValue(int index);

    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    java.util.List<com.google.perftools.profiles.ProfileProto.Label> 
        getLabelList();
    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    com.google.perftools.profiles.ProfileProto.Label getLabel(int index);
    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    int getLabelCount();
    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    java.util.List<? extends com.google.perftools.profiles.ProfileProto.LabelOrBuilder> 
        getLabelOrBuilderList();
    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    com.google.perftools.profiles.ProfileProto.LabelOrBuilder getLabelOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Each Sample records values encountered in some program
   * context. The program context is typically a stack trace, perhaps
   * augmented with auxiliary information like the thread-id, some
   * indicator of a higher level request being handled etc.
   * </pre>
   *
   * Protobuf type {@code perftools.profiles.Sample}
   */
  public static final class Sample extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perftools.profiles.Sample)
      SampleOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 30,
        /* patch= */ 2,
        /* suffix= */ "",
        Sample.class.getName());
    }
    // Use Sample.newBuilder() to construct.
    private Sample(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Sample() {
      locationId_ = emptyLongList();
      value_ = emptyLongList();
      label_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Sample_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Sample_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.perftools.profiles.ProfileProto.Sample.class, com.google.perftools.profiles.ProfileProto.Sample.Builder.class);
    }

    public static final int LOCATION_ID_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList locationId_ =
        emptyLongList();
    /**
     * <pre>
     * The ids recorded here correspond to a Profile.location.id.
     * The leaf is at location_id[0].
     * </pre>
     *
     * <code>repeated uint64 location_id = 1;</code>
     * @return A list containing the locationId.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getLocationIdList() {
      return locationId_;
    }
    /**
     * <pre>
     * The ids recorded here correspond to a Profile.location.id.
     * The leaf is at location_id[0].
     * </pre>
     *
     * <code>repeated uint64 location_id = 1;</code>
     * @return The count of locationId.
     */
    public int getLocationIdCount() {
      return locationId_.size();
    }
    /**
     * <pre>
     * The ids recorded here correspond to a Profile.location.id.
     * The leaf is at location_id[0].
     * </pre>
     *
     * <code>repeated uint64 location_id = 1;</code>
     * @param index The index of the element to return.
     * @return The locationId at the given index.
     */
    public long getLocationId(int index) {
      return locationId_.getLong(index);
    }
    private int locationIdMemoizedSerializedSize = -1;

    public static final int VALUE_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList value_ =
        emptyLongList();
    /**
     * <pre>
     * The type and unit of each value is defined by the corresponding
     * entry in Profile.sample_type. All samples must have the same
     * number of values, the same as the length of Profile.sample_type.
     * When aggregating multiple samples into a single sample, the
     * result has a list of values that is the element-wise sum of the
     * lists of the originals.
     * </pre>
     *
     * <code>repeated int64 value = 2;</code>
     * @return A list containing the value.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getValueList() {
      return value_;
    }
    /**
     * <pre>
     * The type and unit of each value is defined by the corresponding
     * entry in Profile.sample_type. All samples must have the same
     * number of values, the same as the length of Profile.sample_type.
     * When aggregating multiple samples into a single sample, the
     * result has a list of values that is the element-wise sum of the
     * lists of the originals.
     * </pre>
     *
     * <code>repeated int64 value = 2;</code>
     * @return The count of value.
     */
    public int getValueCount() {
      return value_.size();
    }
    /**
     * <pre>
     * The type and unit of each value is defined by the corresponding
     * entry in Profile.sample_type. All samples must have the same
     * number of values, the same as the length of Profile.sample_type.
     * When aggregating multiple samples into a single sample, the
     * result has a list of values that is the element-wise sum of the
     * lists of the originals.
     * </pre>
     *
     * <code>repeated int64 value = 2;</code>
     * @param index The index of the element to return.
     * @return The value at the given index.
     */
    public long getValue(int index) {
      return value_.getLong(index);
    }
    private int valueMemoizedSerializedSize = -1;

    public static final int LABEL_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<com.google.perftools.profiles.ProfileProto.Label> label_;
    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.perftools.profiles.ProfileProto.Label> getLabelList() {
      return label_;
    }
    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.perftools.profiles.ProfileProto.LabelOrBuilder> 
        getLabelOrBuilderList() {
      return label_;
    }
    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    @java.lang.Override
    public int getLabelCount() {
      return label_.size();
    }
    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Label getLabel(int index) {
      return label_.get(index);
    }
    /**
     * <pre>
     * label includes additional context for this sample. It can include
     * things like a thread id, allocation size, etc.
     *
     * NOTE: While possible, having multiple values for the same label key is
     * strongly discouraged and should never be used. Most tools (e.g. pprof) do
     * not have good (or any) support for multi-value labels. And an even more
     * discouraged case is having a string label and a numeric label of the same
     * name on a sample.  Again, possible to express, but should not be used.
     * </pre>
     *
     * <code>repeated .perftools.profiles.Label label = 3;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.LabelOrBuilder getLabelOrBuilder(
        int index) {
      return label_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getLocationIdList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(locationIdMemoizedSerializedSize);
      }
      for (int i = 0; i < locationId_.size(); i++) {
        output.writeUInt64NoTag(locationId_.getLong(i));
      }
      if (getValueList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(valueMemoizedSerializedSize);
      }
      for (int i = 0; i < value_.size(); i++) {
        output.writeInt64NoTag(value_.getLong(i));
      }
      for (int i = 0; i < label_.size(); i++) {
        output.writeMessage(3, label_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < locationId_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(locationId_.getLong(i));
        }
        size += dataSize;
        if (!getLocationIdList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        locationIdMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(value_.getLong(i));
        }
        size += dataSize;
        if (!getValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        valueMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < label_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, label_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.perftools.profiles.ProfileProto.Sample)) {
        return super.equals(obj);
      }
      com.google.perftools.profiles.ProfileProto.Sample other = (com.google.perftools.profiles.ProfileProto.Sample) obj;

      if (!getLocationIdList()
          .equals(other.getLocationIdList())) return false;
      if (!getValueList()
          .equals(other.getValueList())) return false;
      if (!getLabelList()
          .equals(other.getLabelList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLocationIdCount() > 0) {
        hash = (37 * hash) + LOCATION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getLocationIdList().hashCode();
      }
      if (getValueCount() > 0) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValueList().hashCode();
      }
      if (getLabelCount() > 0) {
        hash = (37 * hash) + LABEL_FIELD_NUMBER;
        hash = (53 * hash) + getLabelList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.perftools.profiles.ProfileProto.Sample parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.perftools.profiles.ProfileProto.Sample parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Sample parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.perftools.profiles.ProfileProto.Sample prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Each Sample records values encountered in some program
     * context. The program context is typically a stack trace, perhaps
     * augmented with auxiliary information like the thread-id, some
     * indicator of a higher level request being handled etc.
     * </pre>
     *
     * Protobuf type {@code perftools.profiles.Sample}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perftools.profiles.Sample)
        com.google.perftools.profiles.ProfileProto.SampleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Sample_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Sample_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.perftools.profiles.ProfileProto.Sample.class, com.google.perftools.profiles.ProfileProto.Sample.Builder.class);
      }

      // Construct using com.google.perftools.profiles.ProfileProto.Sample.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        locationId_ = emptyLongList();
        value_ = emptyLongList();
        if (labelBuilder_ == null) {
          label_ = java.util.Collections.emptyList();
        } else {
          label_ = null;
          labelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Sample_descriptor;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Sample getDefaultInstanceForType() {
        return com.google.perftools.profiles.ProfileProto.Sample.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Sample build() {
        com.google.perftools.profiles.ProfileProto.Sample result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Sample buildPartial() {
        com.google.perftools.profiles.ProfileProto.Sample result = new com.google.perftools.profiles.ProfileProto.Sample(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.google.perftools.profiles.ProfileProto.Sample result) {
        if (labelBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            label_ = java.util.Collections.unmodifiableList(label_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.label_ = label_;
        } else {
          result.label_ = labelBuilder_.build();
        }
      }

      private void buildPartial0(com.google.perftools.profiles.ProfileProto.Sample result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          locationId_.makeImmutable();
          result.locationId_ = locationId_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          value_.makeImmutable();
          result.value_ = value_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.perftools.profiles.ProfileProto.Sample) {
          return mergeFrom((com.google.perftools.profiles.ProfileProto.Sample)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.perftools.profiles.ProfileProto.Sample other) {
        if (other == com.google.perftools.profiles.ProfileProto.Sample.getDefaultInstance()) return this;
        if (!other.locationId_.isEmpty()) {
          if (locationId_.isEmpty()) {
            locationId_ = other.locationId_;
            locationId_.makeImmutable();
            bitField0_ |= 0x00000001;
          } else {
            ensureLocationIdIsMutable();
            locationId_.addAll(other.locationId_);
          }
          onChanged();
        }
        if (!other.value_.isEmpty()) {
          if (value_.isEmpty()) {
            value_ = other.value_;
            value_.makeImmutable();
            bitField0_ |= 0x00000002;
          } else {
            ensureValueIsMutable();
            value_.addAll(other.value_);
          }
          onChanged();
        }
        if (labelBuilder_ == null) {
          if (!other.label_.isEmpty()) {
            if (label_.isEmpty()) {
              label_ = other.label_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureLabelIsMutable();
              label_.addAll(other.label_);
            }
            onChanged();
          }
        } else {
          if (!other.label_.isEmpty()) {
            if (labelBuilder_.isEmpty()) {
              labelBuilder_.dispose();
              labelBuilder_ = null;
              label_ = other.label_;
              bitField0_ = (bitField0_ & ~0x00000004);
              labelBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetLabelFieldBuilder() : null;
            } else {
              labelBuilder_.addAllMessages(other.label_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                long v = input.readUInt64();
                ensureLocationIdIsMutable();
                locationId_.addLong(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureLocationIdIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  locationId_.addLong(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 16: {
                long v = input.readInt64();
                ensureValueIsMutable();
                value_.addLong(v);
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureValueIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  value_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 18
              case 26: {
                com.google.perftools.profiles.ProfileProto.Label m =
                    input.readMessage(
                        com.google.perftools.profiles.ProfileProto.Label.parser(),
                        extensionRegistry);
                if (labelBuilder_ == null) {
                  ensureLabelIsMutable();
                  label_.add(m);
                } else {
                  labelBuilder_.addMessage(m);
                }
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.LongList locationId_ = emptyLongList();
      private void ensureLocationIdIsMutable() {
        if (!locationId_.isModifiable()) {
          locationId_ = makeMutableCopy(locationId_);
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * The ids recorded here correspond to a Profile.location.id.
       * The leaf is at location_id[0].
       * </pre>
       *
       * <code>repeated uint64 location_id = 1;</code>
       * @return A list containing the locationId.
       */
      public java.util.List<java.lang.Long>
          getLocationIdList() {
        locationId_.makeImmutable();
        return locationId_;
      }
      /**
       * <pre>
       * The ids recorded here correspond to a Profile.location.id.
       * The leaf is at location_id[0].
       * </pre>
       *
       * <code>repeated uint64 location_id = 1;</code>
       * @return The count of locationId.
       */
      public int getLocationIdCount() {
        return locationId_.size();
      }
      /**
       * <pre>
       * The ids recorded here correspond to a Profile.location.id.
       * The leaf is at location_id[0].
       * </pre>
       *
       * <code>repeated uint64 location_id = 1;</code>
       * @param index The index of the element to return.
       * @return The locationId at the given index.
       */
      public long getLocationId(int index) {
        return locationId_.getLong(index);
      }
      /**
       * <pre>
       * The ids recorded here correspond to a Profile.location.id.
       * The leaf is at location_id[0].
       * </pre>
       *
       * <code>repeated uint64 location_id = 1;</code>
       * @param index The index to set the value at.
       * @param value The locationId to set.
       * @return This builder for chaining.
       */
      public Builder setLocationId(
          int index, long value) {

        ensureLocationIdIsMutable();
        locationId_.setLong(index, value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The ids recorded here correspond to a Profile.location.id.
       * The leaf is at location_id[0].
       * </pre>
       *
       * <code>repeated uint64 location_id = 1;</code>
       * @param value The locationId to add.
       * @return This builder for chaining.
       */
      public Builder addLocationId(long value) {

        ensureLocationIdIsMutable();
        locationId_.addLong(value);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The ids recorded here correspond to a Profile.location.id.
       * The leaf is at location_id[0].
       * </pre>
       *
       * <code>repeated uint64 location_id = 1;</code>
       * @param values The locationId to add.
       * @return This builder for chaining.
       */
      public Builder addAllLocationId(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureLocationIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, locationId_);
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The ids recorded here correspond to a Profile.location.id.
       * The leaf is at location_id[0].
       * </pre>
       *
       * <code>repeated uint64 location_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocationId() {
        locationId_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList value_ = emptyLongList();
      private void ensureValueIsMutable() {
        if (!value_.isModifiable()) {
          value_ = makeMutableCopy(value_);
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <pre>
       * The type and unit of each value is defined by the corresponding
       * entry in Profile.sample_type. All samples must have the same
       * number of values, the same as the length of Profile.sample_type.
       * When aggregating multiple samples into a single sample, the
       * result has a list of values that is the element-wise sum of the
       * lists of the originals.
       * </pre>
       *
       * <code>repeated int64 value = 2;</code>
       * @return A list containing the value.
       */
      public java.util.List<java.lang.Long>
          getValueList() {
        value_.makeImmutable();
        return value_;
      }
      /**
       * <pre>
       * The type and unit of each value is defined by the corresponding
       * entry in Profile.sample_type. All samples must have the same
       * number of values, the same as the length of Profile.sample_type.
       * When aggregating multiple samples into a single sample, the
       * result has a list of values that is the element-wise sum of the
       * lists of the originals.
       * </pre>
       *
       * <code>repeated int64 value = 2;</code>
       * @return The count of value.
       */
      public int getValueCount() {
        return value_.size();
      }
      /**
       * <pre>
       * The type and unit of each value is defined by the corresponding
       * entry in Profile.sample_type. All samples must have the same
       * number of values, the same as the length of Profile.sample_type.
       * When aggregating multiple samples into a single sample, the
       * result has a list of values that is the element-wise sum of the
       * lists of the originals.
       * </pre>
       *
       * <code>repeated int64 value = 2;</code>
       * @param index The index of the element to return.
       * @return The value at the given index.
       */
      public long getValue(int index) {
        return value_.getLong(index);
      }
      /**
       * <pre>
       * The type and unit of each value is defined by the corresponding
       * entry in Profile.sample_type. All samples must have the same
       * number of values, the same as the length of Profile.sample_type.
       * When aggregating multiple samples into a single sample, the
       * result has a list of values that is the element-wise sum of the
       * lists of the originals.
       * </pre>
       *
       * <code>repeated int64 value = 2;</code>
       * @param index The index to set the value at.
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          int index, long value) {

        ensureValueIsMutable();
        value_.setLong(index, value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type and unit of each value is defined by the corresponding
       * entry in Profile.sample_type. All samples must have the same
       * number of values, the same as the length of Profile.sample_type.
       * When aggregating multiple samples into a single sample, the
       * result has a list of values that is the element-wise sum of the
       * lists of the originals.
       * </pre>
       *
       * <code>repeated int64 value = 2;</code>
       * @param value The value to add.
       * @return This builder for chaining.
       */
      public Builder addValue(long value) {

        ensureValueIsMutable();
        value_.addLong(value);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type and unit of each value is defined by the corresponding
       * entry in Profile.sample_type. All samples must have the same
       * number of values, the same as the length of Profile.sample_type.
       * When aggregating multiple samples into a single sample, the
       * result has a list of values that is the element-wise sum of the
       * lists of the originals.
       * </pre>
       *
       * <code>repeated int64 value = 2;</code>
       * @param values The value to add.
       * @return This builder for chaining.
       */
      public Builder addAllValue(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureValueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, value_);
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type and unit of each value is defined by the corresponding
       * entry in Profile.sample_type. All samples must have the same
       * number of values, the same as the length of Profile.sample_type.
       * When aggregating multiple samples into a single sample, the
       * result has a list of values that is the element-wise sum of the
       * lists of the originals.
       * </pre>
       *
       * <code>repeated int64 value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        value_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<com.google.perftools.profiles.ProfileProto.Label> label_ =
        java.util.Collections.emptyList();
      private void ensureLabelIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          label_ = new java.util.ArrayList<com.google.perftools.profiles.ProfileProto.Label>(label_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Label, com.google.perftools.profiles.ProfileProto.Label.Builder, com.google.perftools.profiles.ProfileProto.LabelOrBuilder> labelBuilder_;

      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Label> getLabelList() {
        if (labelBuilder_ == null) {
          return java.util.Collections.unmodifiableList(label_);
        } else {
          return labelBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public int getLabelCount() {
        if (labelBuilder_ == null) {
          return label_.size();
        } else {
          return labelBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Label getLabel(int index) {
        if (labelBuilder_ == null) {
          return label_.get(index);
        } else {
          return labelBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public Builder setLabel(
          int index, com.google.perftools.profiles.ProfileProto.Label value) {
        if (labelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelIsMutable();
          label_.set(index, value);
          onChanged();
        } else {
          labelBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public Builder setLabel(
          int index, com.google.perftools.profiles.ProfileProto.Label.Builder builderForValue) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          label_.set(index, builderForValue.build());
          onChanged();
        } else {
          labelBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public Builder addLabel(com.google.perftools.profiles.ProfileProto.Label value) {
        if (labelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelIsMutable();
          label_.add(value);
          onChanged();
        } else {
          labelBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public Builder addLabel(
          int index, com.google.perftools.profiles.ProfileProto.Label value) {
        if (labelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelIsMutable();
          label_.add(index, value);
          onChanged();
        } else {
          labelBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public Builder addLabel(
          com.google.perftools.profiles.ProfileProto.Label.Builder builderForValue) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          label_.add(builderForValue.build());
          onChanged();
        } else {
          labelBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public Builder addLabel(
          int index, com.google.perftools.profiles.ProfileProto.Label.Builder builderForValue) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          label_.add(index, builderForValue.build());
          onChanged();
        } else {
          labelBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public Builder addAllLabel(
          java.lang.Iterable<? extends com.google.perftools.profiles.ProfileProto.Label> values) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, label_);
          onChanged();
        } else {
          labelBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public Builder clearLabel() {
        if (labelBuilder_ == null) {
          label_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          labelBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public Builder removeLabel(int index) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          label_.remove(index);
          onChanged();
        } else {
          labelBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Label.Builder getLabelBuilder(
          int index) {
        return internalGetLabelFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.LabelOrBuilder getLabelOrBuilder(
          int index) {
        if (labelBuilder_ == null) {
          return label_.get(index);  } else {
          return labelBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public java.util.List<? extends com.google.perftools.profiles.ProfileProto.LabelOrBuilder> 
           getLabelOrBuilderList() {
        if (labelBuilder_ != null) {
          return labelBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(label_);
        }
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Label.Builder addLabelBuilder() {
        return internalGetLabelFieldBuilder().addBuilder(
            com.google.perftools.profiles.ProfileProto.Label.getDefaultInstance());
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Label.Builder addLabelBuilder(
          int index) {
        return internalGetLabelFieldBuilder().addBuilder(
            index, com.google.perftools.profiles.ProfileProto.Label.getDefaultInstance());
      }
      /**
       * <pre>
       * label includes additional context for this sample. It can include
       * things like a thread id, allocation size, etc.
       *
       * NOTE: While possible, having multiple values for the same label key is
       * strongly discouraged and should never be used. Most tools (e.g. pprof) do
       * not have good (or any) support for multi-value labels. And an even more
       * discouraged case is having a string label and a numeric label of the same
       * name on a sample.  Again, possible to express, but should not be used.
       * </pre>
       *
       * <code>repeated .perftools.profiles.Label label = 3;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Label.Builder> 
           getLabelBuilderList() {
        return internalGetLabelFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Label, com.google.perftools.profiles.ProfileProto.Label.Builder, com.google.perftools.profiles.ProfileProto.LabelOrBuilder> 
          internalGetLabelFieldBuilder() {
        if (labelBuilder_ == null) {
          labelBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.perftools.profiles.ProfileProto.Label, com.google.perftools.profiles.ProfileProto.Label.Builder, com.google.perftools.profiles.ProfileProto.LabelOrBuilder>(
                  label_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          label_ = null;
        }
        return labelBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:perftools.profiles.Sample)
    }

    // @@protoc_insertion_point(class_scope:perftools.profiles.Sample)
    private static final com.google.perftools.profiles.ProfileProto.Sample DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.perftools.profiles.ProfileProto.Sample();
    }

    public static com.google.perftools.profiles.ProfileProto.Sample getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Sample>
        PARSER = new com.google.protobuf.AbstractParser<Sample>() {
      @java.lang.Override
      public Sample parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Sample> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Sample> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Sample getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LabelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perftools.profiles.Label)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Index into string table. An annotation for a sample (e.g.
     * "allocation_size") with an associated value.
     * Keys with "pprof::" prefix are reserved for internal use by pprof.
     * </pre>
     *
     * <code>int64 key = 1;</code>
     * @return The key.
     */
    long getKey();

    /**
     * <pre>
     * At most one of the following must be present
     * </pre>
     *
     * <code>int64 str = 2;</code>
     * @return The str.
     */
    long getStr();

    /**
     * <code>int64 num = 3;</code>
     * @return The num.
     */
    long getNum();

    /**
     * <pre>
     * Should only be present when num is present.
     * Specifies the units of num.
     * Use arbitrary string (for example, "requests") as a custom count unit.
     * If no unit is specified, consumer may apply heuristic to deduce the unit.
     * Consumers may also  interpret units like "bytes" and "kilobytes" as memory
     * units and units like "seconds" and "nanoseconds" as time units,
     * and apply appropriate unit conversions to these.
     * </pre>
     *
     * <code>int64 num_unit = 4;</code>
     * @return The numUnit.
     */
    long getNumUnit();
  }
  /**
   * Protobuf type {@code perftools.profiles.Label}
   */
  public static final class Label extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perftools.profiles.Label)
      LabelOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 30,
        /* patch= */ 2,
        /* suffix= */ "",
        Label.class.getName());
    }
    // Use Label.newBuilder() to construct.
    private Label(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Label() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Label_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Label_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.perftools.profiles.ProfileProto.Label.class, com.google.perftools.profiles.ProfileProto.Label.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private long key_ = 0L;
    /**
     * <pre>
     * Index into string table. An annotation for a sample (e.g.
     * "allocation_size") with an associated value.
     * Keys with "pprof::" prefix are reserved for internal use by pprof.
     * </pre>
     *
     * <code>int64 key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public long getKey() {
      return key_;
    }

    public static final int STR_FIELD_NUMBER = 2;
    private long str_ = 0L;
    /**
     * <pre>
     * At most one of the following must be present
     * </pre>
     *
     * <code>int64 str = 2;</code>
     * @return The str.
     */
    @java.lang.Override
    public long getStr() {
      return str_;
    }

    public static final int NUM_FIELD_NUMBER = 3;
    private long num_ = 0L;
    /**
     * <code>int64 num = 3;</code>
     * @return The num.
     */
    @java.lang.Override
    public long getNum() {
      return num_;
    }

    public static final int NUM_UNIT_FIELD_NUMBER = 4;
    private long numUnit_ = 0L;
    /**
     * <pre>
     * Should only be present when num is present.
     * Specifies the units of num.
     * Use arbitrary string (for example, "requests") as a custom count unit.
     * If no unit is specified, consumer may apply heuristic to deduce the unit.
     * Consumers may also  interpret units like "bytes" and "kilobytes" as memory
     * units and units like "seconds" and "nanoseconds" as time units,
     * and apply appropriate unit conversions to these.
     * </pre>
     *
     * <code>int64 num_unit = 4;</code>
     * @return The numUnit.
     */
    @java.lang.Override
    public long getNumUnit() {
      return numUnit_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (key_ != 0L) {
        output.writeInt64(1, key_);
      }
      if (str_ != 0L) {
        output.writeInt64(2, str_);
      }
      if (num_ != 0L) {
        output.writeInt64(3, num_);
      }
      if (numUnit_ != 0L) {
        output.writeInt64(4, numUnit_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (key_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, key_);
      }
      if (str_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, str_);
      }
      if (num_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, num_);
      }
      if (numUnit_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, numUnit_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.perftools.profiles.ProfileProto.Label)) {
        return super.equals(obj);
      }
      com.google.perftools.profiles.ProfileProto.Label other = (com.google.perftools.profiles.ProfileProto.Label) obj;

      if (getKey()
          != other.getKey()) return false;
      if (getStr()
          != other.getStr()) return false;
      if (getNum()
          != other.getNum()) return false;
      if (getNumUnit()
          != other.getNumUnit()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getKey());
      hash = (37 * hash) + STR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStr());
      hash = (37 * hash) + NUM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNum());
      hash = (37 * hash) + NUM_UNIT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNumUnit());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.perftools.profiles.ProfileProto.Label parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.perftools.profiles.ProfileProto.Label parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Label parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.perftools.profiles.ProfileProto.Label prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perftools.profiles.Label}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perftools.profiles.Label)
        com.google.perftools.profiles.ProfileProto.LabelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Label_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Label_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.perftools.profiles.ProfileProto.Label.class, com.google.perftools.profiles.ProfileProto.Label.Builder.class);
      }

      // Construct using com.google.perftools.profiles.ProfileProto.Label.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        key_ = 0L;
        str_ = 0L;
        num_ = 0L;
        numUnit_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Label_descriptor;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Label getDefaultInstanceForType() {
        return com.google.perftools.profiles.ProfileProto.Label.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Label build() {
        com.google.perftools.profiles.ProfileProto.Label result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Label buildPartial() {
        com.google.perftools.profiles.ProfileProto.Label result = new com.google.perftools.profiles.ProfileProto.Label(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.perftools.profiles.ProfileProto.Label result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.key_ = key_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.str_ = str_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.num_ = num_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.numUnit_ = numUnit_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.perftools.profiles.ProfileProto.Label) {
          return mergeFrom((com.google.perftools.profiles.ProfileProto.Label)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.perftools.profiles.ProfileProto.Label other) {
        if (other == com.google.perftools.profiles.ProfileProto.Label.getDefaultInstance()) return this;
        if (other.getKey() != 0L) {
          setKey(other.getKey());
        }
        if (other.getStr() != 0L) {
          setStr(other.getStr());
        }
        if (other.getNum() != 0L) {
          setNum(other.getNum());
        }
        if (other.getNumUnit() != 0L) {
          setNumUnit(other.getNumUnit());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                key_ = input.readInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                str_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                num_ = input.readInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                numUnit_ = input.readInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long key_ ;
      /**
       * <pre>
       * Index into string table. An annotation for a sample (e.g.
       * "allocation_size") with an associated value.
       * Keys with "pprof::" prefix are reserved for internal use by pprof.
       * </pre>
       *
       * <code>int64 key = 1;</code>
       * @return The key.
       */
      @java.lang.Override
      public long getKey() {
        return key_;
      }
      /**
       * <pre>
       * Index into string table. An annotation for a sample (e.g.
       * "allocation_size") with an associated value.
       * Keys with "pprof::" prefix are reserved for internal use by pprof.
       * </pre>
       *
       * <code>int64 key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(long value) {

        key_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Index into string table. An annotation for a sample (e.g.
       * "allocation_size") with an associated value.
       * Keys with "pprof::" prefix are reserved for internal use by pprof.
       * </pre>
       *
       * <code>int64 key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = 0L;
        onChanged();
        return this;
      }

      private long str_ ;
      /**
       * <pre>
       * At most one of the following must be present
       * </pre>
       *
       * <code>int64 str = 2;</code>
       * @return The str.
       */
      @java.lang.Override
      public long getStr() {
        return str_;
      }
      /**
       * <pre>
       * At most one of the following must be present
       * </pre>
       *
       * <code>int64 str = 2;</code>
       * @param value The str to set.
       * @return This builder for chaining.
       */
      public Builder setStr(long value) {

        str_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * At most one of the following must be present
       * </pre>
       *
       * <code>int64 str = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStr() {
        bitField0_ = (bitField0_ & ~0x00000002);
        str_ = 0L;
        onChanged();
        return this;
      }

      private long num_ ;
      /**
       * <code>int64 num = 3;</code>
       * @return The num.
       */
      @java.lang.Override
      public long getNum() {
        return num_;
      }
      /**
       * <code>int64 num = 3;</code>
       * @param value The num to set.
       * @return This builder for chaining.
       */
      public Builder setNum(long value) {

        num_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>int64 num = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearNum() {
        bitField0_ = (bitField0_ & ~0x00000004);
        num_ = 0L;
        onChanged();
        return this;
      }

      private long numUnit_ ;
      /**
       * <pre>
       * Should only be present when num is present.
       * Specifies the units of num.
       * Use arbitrary string (for example, "requests") as a custom count unit.
       * If no unit is specified, consumer may apply heuristic to deduce the unit.
       * Consumers may also  interpret units like "bytes" and "kilobytes" as memory
       * units and units like "seconds" and "nanoseconds" as time units,
       * and apply appropriate unit conversions to these.
       * </pre>
       *
       * <code>int64 num_unit = 4;</code>
       * @return The numUnit.
       */
      @java.lang.Override
      public long getNumUnit() {
        return numUnit_;
      }
      /**
       * <pre>
       * Should only be present when num is present.
       * Specifies the units of num.
       * Use arbitrary string (for example, "requests") as a custom count unit.
       * If no unit is specified, consumer may apply heuristic to deduce the unit.
       * Consumers may also  interpret units like "bytes" and "kilobytes" as memory
       * units and units like "seconds" and "nanoseconds" as time units,
       * and apply appropriate unit conversions to these.
       * </pre>
       *
       * <code>int64 num_unit = 4;</code>
       * @param value The numUnit to set.
       * @return This builder for chaining.
       */
      public Builder setNumUnit(long value) {

        numUnit_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Should only be present when num is present.
       * Specifies the units of num.
       * Use arbitrary string (for example, "requests") as a custom count unit.
       * If no unit is specified, consumer may apply heuristic to deduce the unit.
       * Consumers may also  interpret units like "bytes" and "kilobytes" as memory
       * units and units like "seconds" and "nanoseconds" as time units,
       * and apply appropriate unit conversions to these.
       * </pre>
       *
       * <code>int64 num_unit = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumUnit() {
        bitField0_ = (bitField0_ & ~0x00000008);
        numUnit_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perftools.profiles.Label)
    }

    // @@protoc_insertion_point(class_scope:perftools.profiles.Label)
    private static final com.google.perftools.profiles.ProfileProto.Label DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.perftools.profiles.ProfileProto.Label();
    }

    public static com.google.perftools.profiles.ProfileProto.Label getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Label>
        PARSER = new com.google.protobuf.AbstractParser<Label>() {
      @java.lang.Override
      public Label parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Label> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Label> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Label getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MappingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perftools.profiles.Mapping)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Unique nonzero id for the mapping.
     * </pre>
     *
     * <code>uint64 id = 1;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * Address at which the binary (or DLL) is loaded into memory.
     * </pre>
     *
     * <code>uint64 memory_start = 2;</code>
     * @return The memoryStart.
     */
    long getMemoryStart();

    /**
     * <pre>
     * The limit of the address range occupied by this mapping.
     * </pre>
     *
     * <code>uint64 memory_limit = 3;</code>
     * @return The memoryLimit.
     */
    long getMemoryLimit();

    /**
     * <pre>
     * Offset in the binary that corresponds to the first mapped address.
     * </pre>
     *
     * <code>uint64 file_offset = 4;</code>
     * @return The fileOffset.
     */
    long getFileOffset();

    /**
     * <pre>
     * The object this entry is loaded from.  This can be a filename on
     * disk for the main binary and shared libraries, or virtual
     * abstractions like "[vdso]".
     * </pre>
     *
     * <code>int64 filename = 5;</code>
     * @return The filename.
     */
    long getFilename();

    /**
     * <pre>
     * A string that uniquely identifies a particular program version
     * with high probability. E.g., for binaries generated by GNU tools,
     * it could be the contents of the .note.gnu.build-id field.
     * </pre>
     *
     * <code>int64 build_id = 6;</code>
     * @return The buildId.
     */
    long getBuildId();

    /**
     * <pre>
     * The following fields indicate the resolution of symbolic info.
     * </pre>
     *
     * <code>bool has_functions = 7;</code>
     * @return The hasFunctions.
     */
    boolean getHasFunctions();

    /**
     * <code>bool has_filenames = 8;</code>
     * @return The hasFilenames.
     */
    boolean getHasFilenames();

    /**
     * <code>bool has_line_numbers = 9;</code>
     * @return The hasLineNumbers.
     */
    boolean getHasLineNumbers();

    /**
     * <code>bool has_inline_frames = 10;</code>
     * @return The hasInlineFrames.
     */
    boolean getHasInlineFrames();
  }
  /**
   * Protobuf type {@code perftools.profiles.Mapping}
   */
  public static final class Mapping extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perftools.profiles.Mapping)
      MappingOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 30,
        /* patch= */ 2,
        /* suffix= */ "",
        Mapping.class.getName());
    }
    // Use Mapping.newBuilder() to construct.
    private Mapping(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Mapping() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Mapping_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Mapping_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.perftools.profiles.ProfileProto.Mapping.class, com.google.perftools.profiles.ProfileProto.Mapping.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private long id_ = 0L;
    /**
     * <pre>
     * Unique nonzero id for the mapping.
     * </pre>
     *
     * <code>uint64 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }

    public static final int MEMORY_START_FIELD_NUMBER = 2;
    private long memoryStart_ = 0L;
    /**
     * <pre>
     * Address at which the binary (or DLL) is loaded into memory.
     * </pre>
     *
     * <code>uint64 memory_start = 2;</code>
     * @return The memoryStart.
     */
    @java.lang.Override
    public long getMemoryStart() {
      return memoryStart_;
    }

    public static final int MEMORY_LIMIT_FIELD_NUMBER = 3;
    private long memoryLimit_ = 0L;
    /**
     * <pre>
     * The limit of the address range occupied by this mapping.
     * </pre>
     *
     * <code>uint64 memory_limit = 3;</code>
     * @return The memoryLimit.
     */
    @java.lang.Override
    public long getMemoryLimit() {
      return memoryLimit_;
    }

    public static final int FILE_OFFSET_FIELD_NUMBER = 4;
    private long fileOffset_ = 0L;
    /**
     * <pre>
     * Offset in the binary that corresponds to the first mapped address.
     * </pre>
     *
     * <code>uint64 file_offset = 4;</code>
     * @return The fileOffset.
     */
    @java.lang.Override
    public long getFileOffset() {
      return fileOffset_;
    }

    public static final int FILENAME_FIELD_NUMBER = 5;
    private long filename_ = 0L;
    /**
     * <pre>
     * The object this entry is loaded from.  This can be a filename on
     * disk for the main binary and shared libraries, or virtual
     * abstractions like "[vdso]".
     * </pre>
     *
     * <code>int64 filename = 5;</code>
     * @return The filename.
     */
    @java.lang.Override
    public long getFilename() {
      return filename_;
    }

    public static final int BUILD_ID_FIELD_NUMBER = 6;
    private long buildId_ = 0L;
    /**
     * <pre>
     * A string that uniquely identifies a particular program version
     * with high probability. E.g., for binaries generated by GNU tools,
     * it could be the contents of the .note.gnu.build-id field.
     * </pre>
     *
     * <code>int64 build_id = 6;</code>
     * @return The buildId.
     */
    @java.lang.Override
    public long getBuildId() {
      return buildId_;
    }

    public static final int HAS_FUNCTIONS_FIELD_NUMBER = 7;
    private boolean hasFunctions_ = false;
    /**
     * <pre>
     * The following fields indicate the resolution of symbolic info.
     * </pre>
     *
     * <code>bool has_functions = 7;</code>
     * @return The hasFunctions.
     */
    @java.lang.Override
    public boolean getHasFunctions() {
      return hasFunctions_;
    }

    public static final int HAS_FILENAMES_FIELD_NUMBER = 8;
    private boolean hasFilenames_ = false;
    /**
     * <code>bool has_filenames = 8;</code>
     * @return The hasFilenames.
     */
    @java.lang.Override
    public boolean getHasFilenames() {
      return hasFilenames_;
    }

    public static final int HAS_LINE_NUMBERS_FIELD_NUMBER = 9;
    private boolean hasLineNumbers_ = false;
    /**
     * <code>bool has_line_numbers = 9;</code>
     * @return The hasLineNumbers.
     */
    @java.lang.Override
    public boolean getHasLineNumbers() {
      return hasLineNumbers_;
    }

    public static final int HAS_INLINE_FRAMES_FIELD_NUMBER = 10;
    private boolean hasInlineFrames_ = false;
    /**
     * <code>bool has_inline_frames = 10;</code>
     * @return The hasInlineFrames.
     */
    @java.lang.Override
    public boolean getHasInlineFrames() {
      return hasInlineFrames_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0L) {
        output.writeUInt64(1, id_);
      }
      if (memoryStart_ != 0L) {
        output.writeUInt64(2, memoryStart_);
      }
      if (memoryLimit_ != 0L) {
        output.writeUInt64(3, memoryLimit_);
      }
      if (fileOffset_ != 0L) {
        output.writeUInt64(4, fileOffset_);
      }
      if (filename_ != 0L) {
        output.writeInt64(5, filename_);
      }
      if (buildId_ != 0L) {
        output.writeInt64(6, buildId_);
      }
      if (hasFunctions_ != false) {
        output.writeBool(7, hasFunctions_);
      }
      if (hasFilenames_ != false) {
        output.writeBool(8, hasFilenames_);
      }
      if (hasLineNumbers_ != false) {
        output.writeBool(9, hasLineNumbers_);
      }
      if (hasInlineFrames_ != false) {
        output.writeBool(10, hasInlineFrames_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, id_);
      }
      if (memoryStart_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, memoryStart_);
      }
      if (memoryLimit_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, memoryLimit_);
      }
      if (fileOffset_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, fileOffset_);
      }
      if (filename_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, filename_);
      }
      if (buildId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, buildId_);
      }
      if (hasFunctions_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, hasFunctions_);
      }
      if (hasFilenames_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, hasFilenames_);
      }
      if (hasLineNumbers_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, hasLineNumbers_);
      }
      if (hasInlineFrames_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, hasInlineFrames_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.perftools.profiles.ProfileProto.Mapping)) {
        return super.equals(obj);
      }
      com.google.perftools.profiles.ProfileProto.Mapping other = (com.google.perftools.profiles.ProfileProto.Mapping) obj;

      if (getId()
          != other.getId()) return false;
      if (getMemoryStart()
          != other.getMemoryStart()) return false;
      if (getMemoryLimit()
          != other.getMemoryLimit()) return false;
      if (getFileOffset()
          != other.getFileOffset()) return false;
      if (getFilename()
          != other.getFilename()) return false;
      if (getBuildId()
          != other.getBuildId()) return false;
      if (getHasFunctions()
          != other.getHasFunctions()) return false;
      if (getHasFilenames()
          != other.getHasFilenames()) return false;
      if (getHasLineNumbers()
          != other.getHasLineNumbers()) return false;
      if (getHasInlineFrames()
          != other.getHasInlineFrames()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + MEMORY_START_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMemoryStart());
      hash = (37 * hash) + MEMORY_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMemoryLimit());
      hash = (37 * hash) + FILE_OFFSET_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFileOffset());
      hash = (37 * hash) + FILENAME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFilename());
      hash = (37 * hash) + BUILD_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBuildId());
      hash = (37 * hash) + HAS_FUNCTIONS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getHasFunctions());
      hash = (37 * hash) + HAS_FILENAMES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getHasFilenames());
      hash = (37 * hash) + HAS_LINE_NUMBERS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getHasLineNumbers());
      hash = (37 * hash) + HAS_INLINE_FRAMES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getHasInlineFrames());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.perftools.profiles.ProfileProto.Mapping parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.perftools.profiles.ProfileProto.Mapping parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Mapping parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.perftools.profiles.ProfileProto.Mapping prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perftools.profiles.Mapping}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perftools.profiles.Mapping)
        com.google.perftools.profiles.ProfileProto.MappingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Mapping_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Mapping_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.perftools.profiles.ProfileProto.Mapping.class, com.google.perftools.profiles.ProfileProto.Mapping.Builder.class);
      }

      // Construct using com.google.perftools.profiles.ProfileProto.Mapping.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        id_ = 0L;
        memoryStart_ = 0L;
        memoryLimit_ = 0L;
        fileOffset_ = 0L;
        filename_ = 0L;
        buildId_ = 0L;
        hasFunctions_ = false;
        hasFilenames_ = false;
        hasLineNumbers_ = false;
        hasInlineFrames_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Mapping_descriptor;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Mapping getDefaultInstanceForType() {
        return com.google.perftools.profiles.ProfileProto.Mapping.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Mapping build() {
        com.google.perftools.profiles.ProfileProto.Mapping result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Mapping buildPartial() {
        com.google.perftools.profiles.ProfileProto.Mapping result = new com.google.perftools.profiles.ProfileProto.Mapping(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.perftools.profiles.ProfileProto.Mapping result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.id_ = id_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.memoryStart_ = memoryStart_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.memoryLimit_ = memoryLimit_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.fileOffset_ = fileOffset_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.filename_ = filename_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.buildId_ = buildId_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.hasFunctions_ = hasFunctions_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.hasFilenames_ = hasFilenames_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.hasLineNumbers_ = hasLineNumbers_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.hasInlineFrames_ = hasInlineFrames_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.perftools.profiles.ProfileProto.Mapping) {
          return mergeFrom((com.google.perftools.profiles.ProfileProto.Mapping)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.perftools.profiles.ProfileProto.Mapping other) {
        if (other == com.google.perftools.profiles.ProfileProto.Mapping.getDefaultInstance()) return this;
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (other.getMemoryStart() != 0L) {
          setMemoryStart(other.getMemoryStart());
        }
        if (other.getMemoryLimit() != 0L) {
          setMemoryLimit(other.getMemoryLimit());
        }
        if (other.getFileOffset() != 0L) {
          setFileOffset(other.getFileOffset());
        }
        if (other.getFilename() != 0L) {
          setFilename(other.getFilename());
        }
        if (other.getBuildId() != 0L) {
          setBuildId(other.getBuildId());
        }
        if (other.getHasFunctions() != false) {
          setHasFunctions(other.getHasFunctions());
        }
        if (other.getHasFilenames() != false) {
          setHasFilenames(other.getHasFilenames());
        }
        if (other.getHasLineNumbers() != false) {
          setHasLineNumbers(other.getHasLineNumbers());
        }
        if (other.getHasInlineFrames() != false) {
          setHasInlineFrames(other.getHasInlineFrames());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                memoryStart_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                memoryLimit_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                fileOffset_ = input.readUInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                filename_ = input.readInt64();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                buildId_ = input.readInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                hasFunctions_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                hasFilenames_ = input.readBool();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                hasLineNumbers_ = input.readBool();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 80: {
                hasInlineFrames_ = input.readBool();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long id_ ;
      /**
       * <pre>
       * Unique nonzero id for the mapping.
       * </pre>
       *
       * <code>uint64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * Unique nonzero id for the mapping.
       * </pre>
       *
       * <code>uint64 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {

        id_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique nonzero id for the mapping.
       * </pre>
       *
       * <code>uint64 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        onChanged();
        return this;
      }

      private long memoryStart_ ;
      /**
       * <pre>
       * Address at which the binary (or DLL) is loaded into memory.
       * </pre>
       *
       * <code>uint64 memory_start = 2;</code>
       * @return The memoryStart.
       */
      @java.lang.Override
      public long getMemoryStart() {
        return memoryStart_;
      }
      /**
       * <pre>
       * Address at which the binary (or DLL) is loaded into memory.
       * </pre>
       *
       * <code>uint64 memory_start = 2;</code>
       * @param value The memoryStart to set.
       * @return This builder for chaining.
       */
      public Builder setMemoryStart(long value) {

        memoryStart_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Address at which the binary (or DLL) is loaded into memory.
       * </pre>
       *
       * <code>uint64 memory_start = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMemoryStart() {
        bitField0_ = (bitField0_ & ~0x00000002);
        memoryStart_ = 0L;
        onChanged();
        return this;
      }

      private long memoryLimit_ ;
      /**
       * <pre>
       * The limit of the address range occupied by this mapping.
       * </pre>
       *
       * <code>uint64 memory_limit = 3;</code>
       * @return The memoryLimit.
       */
      @java.lang.Override
      public long getMemoryLimit() {
        return memoryLimit_;
      }
      /**
       * <pre>
       * The limit of the address range occupied by this mapping.
       * </pre>
       *
       * <code>uint64 memory_limit = 3;</code>
       * @param value The memoryLimit to set.
       * @return This builder for chaining.
       */
      public Builder setMemoryLimit(long value) {

        memoryLimit_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The limit of the address range occupied by this mapping.
       * </pre>
       *
       * <code>uint64 memory_limit = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMemoryLimit() {
        bitField0_ = (bitField0_ & ~0x00000004);
        memoryLimit_ = 0L;
        onChanged();
        return this;
      }

      private long fileOffset_ ;
      /**
       * <pre>
       * Offset in the binary that corresponds to the first mapped address.
       * </pre>
       *
       * <code>uint64 file_offset = 4;</code>
       * @return The fileOffset.
       */
      @java.lang.Override
      public long getFileOffset() {
        return fileOffset_;
      }
      /**
       * <pre>
       * Offset in the binary that corresponds to the first mapped address.
       * </pre>
       *
       * <code>uint64 file_offset = 4;</code>
       * @param value The fileOffset to set.
       * @return This builder for chaining.
       */
      public Builder setFileOffset(long value) {

        fileOffset_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Offset in the binary that corresponds to the first mapped address.
       * </pre>
       *
       * <code>uint64 file_offset = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileOffset() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fileOffset_ = 0L;
        onChanged();
        return this;
      }

      private long filename_ ;
      /**
       * <pre>
       * The object this entry is loaded from.  This can be a filename on
       * disk for the main binary and shared libraries, or virtual
       * abstractions like "[vdso]".
       * </pre>
       *
       * <code>int64 filename = 5;</code>
       * @return The filename.
       */
      @java.lang.Override
      public long getFilename() {
        return filename_;
      }
      /**
       * <pre>
       * The object this entry is loaded from.  This can be a filename on
       * disk for the main binary and shared libraries, or virtual
       * abstractions like "[vdso]".
       * </pre>
       *
       * <code>int64 filename = 5;</code>
       * @param value The filename to set.
       * @return This builder for chaining.
       */
      public Builder setFilename(long value) {

        filename_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The object this entry is loaded from.  This can be a filename on
       * disk for the main binary and shared libraries, or virtual
       * abstractions like "[vdso]".
       * </pre>
       *
       * <code>int64 filename = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearFilename() {
        bitField0_ = (bitField0_ & ~0x00000010);
        filename_ = 0L;
        onChanged();
        return this;
      }

      private long buildId_ ;
      /**
       * <pre>
       * A string that uniquely identifies a particular program version
       * with high probability. E.g., for binaries generated by GNU tools,
       * it could be the contents of the .note.gnu.build-id field.
       * </pre>
       *
       * <code>int64 build_id = 6;</code>
       * @return The buildId.
       */
      @java.lang.Override
      public long getBuildId() {
        return buildId_;
      }
      /**
       * <pre>
       * A string that uniquely identifies a particular program version
       * with high probability. E.g., for binaries generated by GNU tools,
       * it could be the contents of the .note.gnu.build-id field.
       * </pre>
       *
       * <code>int64 build_id = 6;</code>
       * @param value The buildId to set.
       * @return This builder for chaining.
       */
      public Builder setBuildId(long value) {

        buildId_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A string that uniquely identifies a particular program version
       * with high probability. E.g., for binaries generated by GNU tools,
       * it could be the contents of the .note.gnu.build-id field.
       * </pre>
       *
       * <code>int64 build_id = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearBuildId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        buildId_ = 0L;
        onChanged();
        return this;
      }

      private boolean hasFunctions_ ;
      /**
       * <pre>
       * The following fields indicate the resolution of symbolic info.
       * </pre>
       *
       * <code>bool has_functions = 7;</code>
       * @return The hasFunctions.
       */
      @java.lang.Override
      public boolean getHasFunctions() {
        return hasFunctions_;
      }
      /**
       * <pre>
       * The following fields indicate the resolution of symbolic info.
       * </pre>
       *
       * <code>bool has_functions = 7;</code>
       * @param value The hasFunctions to set.
       * @return This builder for chaining.
       */
      public Builder setHasFunctions(boolean value) {

        hasFunctions_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The following fields indicate the resolution of symbolic info.
       * </pre>
       *
       * <code>bool has_functions = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasFunctions() {
        bitField0_ = (bitField0_ & ~0x00000040);
        hasFunctions_ = false;
        onChanged();
        return this;
      }

      private boolean hasFilenames_ ;
      /**
       * <code>bool has_filenames = 8;</code>
       * @return The hasFilenames.
       */
      @java.lang.Override
      public boolean getHasFilenames() {
        return hasFilenames_;
      }
      /**
       * <code>bool has_filenames = 8;</code>
       * @param value The hasFilenames to set.
       * @return This builder for chaining.
       */
      public Builder setHasFilenames(boolean value) {

        hasFilenames_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>bool has_filenames = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasFilenames() {
        bitField0_ = (bitField0_ & ~0x00000080);
        hasFilenames_ = false;
        onChanged();
        return this;
      }

      private boolean hasLineNumbers_ ;
      /**
       * <code>bool has_line_numbers = 9;</code>
       * @return The hasLineNumbers.
       */
      @java.lang.Override
      public boolean getHasLineNumbers() {
        return hasLineNumbers_;
      }
      /**
       * <code>bool has_line_numbers = 9;</code>
       * @param value The hasLineNumbers to set.
       * @return This builder for chaining.
       */
      public Builder setHasLineNumbers(boolean value) {

        hasLineNumbers_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>bool has_line_numbers = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasLineNumbers() {
        bitField0_ = (bitField0_ & ~0x00000100);
        hasLineNumbers_ = false;
        onChanged();
        return this;
      }

      private boolean hasInlineFrames_ ;
      /**
       * <code>bool has_inline_frames = 10;</code>
       * @return The hasInlineFrames.
       */
      @java.lang.Override
      public boolean getHasInlineFrames() {
        return hasInlineFrames_;
      }
      /**
       * <code>bool has_inline_frames = 10;</code>
       * @param value The hasInlineFrames to set.
       * @return This builder for chaining.
       */
      public Builder setHasInlineFrames(boolean value) {

        hasInlineFrames_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>bool has_inline_frames = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearHasInlineFrames() {
        bitField0_ = (bitField0_ & ~0x00000200);
        hasInlineFrames_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perftools.profiles.Mapping)
    }

    // @@protoc_insertion_point(class_scope:perftools.profiles.Mapping)
    private static final com.google.perftools.profiles.ProfileProto.Mapping DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.perftools.profiles.ProfileProto.Mapping();
    }

    public static com.google.perftools.profiles.ProfileProto.Mapping getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Mapping>
        PARSER = new com.google.protobuf.AbstractParser<Mapping>() {
      @java.lang.Override
      public Mapping parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Mapping> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Mapping> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Mapping getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LocationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perftools.profiles.Location)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Unique nonzero id for the location.  A profile could use
     * instruction addresses or any integer sequence as ids.
     * </pre>
     *
     * <code>uint64 id = 1;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * The id of the corresponding profile.Mapping for this location.
     * It can be unset if the mapping is unknown or not applicable for
     * this profile type.
     * </pre>
     *
     * <code>uint64 mapping_id = 2;</code>
     * @return The mappingId.
     */
    long getMappingId();

    /**
     * <pre>
     * The instruction address for this location, if available.  It
     * should be within [Mapping.memory_start...Mapping.memory_limit]
     * for the corresponding mapping. A non-leaf address may be in the
     * middle of a call instruction. It is up to display tools to find
     * the beginning of the instruction if necessary.
     * </pre>
     *
     * <code>uint64 address = 3;</code>
     * @return The address.
     */
    long getAddress();

    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    java.util.List<com.google.perftools.profiles.ProfileProto.Line> 
        getLineList();
    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    com.google.perftools.profiles.ProfileProto.Line getLine(int index);
    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    int getLineCount();
    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    java.util.List<? extends com.google.perftools.profiles.ProfileProto.LineOrBuilder> 
        getLineOrBuilderList();
    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    com.google.perftools.profiles.ProfileProto.LineOrBuilder getLineOrBuilder(
        int index);

    /**
     * <pre>
     * Provides an indication that multiple symbols map to this location's
     * address, for example due to identical code folding by the linker. In that
     * case the line information above represents one of the multiple
     * symbols. This field must be recomputed when the symbolization state of the
     * profile changes.
     * </pre>
     *
     * <code>bool is_folded = 5;</code>
     * @return The isFolded.
     */
    boolean getIsFolded();
  }
  /**
   * <pre>
   * Describes function and line table debug information.
   * </pre>
   *
   * Protobuf type {@code perftools.profiles.Location}
   */
  public static final class Location extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perftools.profiles.Location)
      LocationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 30,
        /* patch= */ 2,
        /* suffix= */ "",
        Location.class.getName());
    }
    // Use Location.newBuilder() to construct.
    private Location(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Location() {
      line_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Location_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Location_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.perftools.profiles.ProfileProto.Location.class, com.google.perftools.profiles.ProfileProto.Location.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private long id_ = 0L;
    /**
     * <pre>
     * Unique nonzero id for the location.  A profile could use
     * instruction addresses or any integer sequence as ids.
     * </pre>
     *
     * <code>uint64 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }

    public static final int MAPPING_ID_FIELD_NUMBER = 2;
    private long mappingId_ = 0L;
    /**
     * <pre>
     * The id of the corresponding profile.Mapping for this location.
     * It can be unset if the mapping is unknown or not applicable for
     * this profile type.
     * </pre>
     *
     * <code>uint64 mapping_id = 2;</code>
     * @return The mappingId.
     */
    @java.lang.Override
    public long getMappingId() {
      return mappingId_;
    }

    public static final int ADDRESS_FIELD_NUMBER = 3;
    private long address_ = 0L;
    /**
     * <pre>
     * The instruction address for this location, if available.  It
     * should be within [Mapping.memory_start...Mapping.memory_limit]
     * for the corresponding mapping. A non-leaf address may be in the
     * middle of a call instruction. It is up to display tools to find
     * the beginning of the instruction if necessary.
     * </pre>
     *
     * <code>uint64 address = 3;</code>
     * @return The address.
     */
    @java.lang.Override
    public long getAddress() {
      return address_;
    }

    public static final int LINE_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<com.google.perftools.profiles.ProfileProto.Line> line_;
    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.perftools.profiles.ProfileProto.Line> getLineList() {
      return line_;
    }
    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.google.perftools.profiles.ProfileProto.LineOrBuilder> 
        getLineOrBuilderList() {
      return line_;
    }
    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    @java.lang.Override
    public int getLineCount() {
      return line_.size();
    }
    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Line getLine(int index) {
      return line_.get(index);
    }
    /**
     * <pre>
     * Multiple line indicates this location has inlined functions,
     * where the last entry represents the caller into which the
     * preceding entries were inlined.
     *
     * E.g., if memcpy() is inlined into printf:
     * line[0].function_name == "memcpy"
     * line[1].function_name == "printf"
     * </pre>
     *
     * <code>repeated .perftools.profiles.Line line = 4;</code>
     */
    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.LineOrBuilder getLineOrBuilder(
        int index) {
      return line_.get(index);
    }

    public static final int IS_FOLDED_FIELD_NUMBER = 5;
    private boolean isFolded_ = false;
    /**
     * <pre>
     * Provides an indication that multiple symbols map to this location's
     * address, for example due to identical code folding by the linker. In that
     * case the line information above represents one of the multiple
     * symbols. This field must be recomputed when the symbolization state of the
     * profile changes.
     * </pre>
     *
     * <code>bool is_folded = 5;</code>
     * @return The isFolded.
     */
    @java.lang.Override
    public boolean getIsFolded() {
      return isFolded_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0L) {
        output.writeUInt64(1, id_);
      }
      if (mappingId_ != 0L) {
        output.writeUInt64(2, mappingId_);
      }
      if (address_ != 0L) {
        output.writeUInt64(3, address_);
      }
      for (int i = 0; i < line_.size(); i++) {
        output.writeMessage(4, line_.get(i));
      }
      if (isFolded_ != false) {
        output.writeBool(5, isFolded_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, id_);
      }
      if (mappingId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, mappingId_);
      }
      if (address_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, address_);
      }
      for (int i = 0; i < line_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, line_.get(i));
      }
      if (isFolded_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isFolded_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.perftools.profiles.ProfileProto.Location)) {
        return super.equals(obj);
      }
      com.google.perftools.profiles.ProfileProto.Location other = (com.google.perftools.profiles.ProfileProto.Location) obj;

      if (getId()
          != other.getId()) return false;
      if (getMappingId()
          != other.getMappingId()) return false;
      if (getAddress()
          != other.getAddress()) return false;
      if (!getLineList()
          .equals(other.getLineList())) return false;
      if (getIsFolded()
          != other.getIsFolded()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + MAPPING_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMappingId());
      hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAddress());
      if (getLineCount() > 0) {
        hash = (37 * hash) + LINE_FIELD_NUMBER;
        hash = (53 * hash) + getLineList().hashCode();
      }
      hash = (37 * hash) + IS_FOLDED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsFolded());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.perftools.profiles.ProfileProto.Location parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.perftools.profiles.ProfileProto.Location parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Location parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.perftools.profiles.ProfileProto.Location prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes function and line table debug information.
     * </pre>
     *
     * Protobuf type {@code perftools.profiles.Location}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perftools.profiles.Location)
        com.google.perftools.profiles.ProfileProto.LocationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Location_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Location_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.perftools.profiles.ProfileProto.Location.class, com.google.perftools.profiles.ProfileProto.Location.Builder.class);
      }

      // Construct using com.google.perftools.profiles.ProfileProto.Location.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        id_ = 0L;
        mappingId_ = 0L;
        address_ = 0L;
        if (lineBuilder_ == null) {
          line_ = java.util.Collections.emptyList();
        } else {
          line_ = null;
          lineBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        isFolded_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Location_descriptor;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Location getDefaultInstanceForType() {
        return com.google.perftools.profiles.ProfileProto.Location.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Location build() {
        com.google.perftools.profiles.ProfileProto.Location result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Location buildPartial() {
        com.google.perftools.profiles.ProfileProto.Location result = new com.google.perftools.profiles.ProfileProto.Location(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.google.perftools.profiles.ProfileProto.Location result) {
        if (lineBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            line_ = java.util.Collections.unmodifiableList(line_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.line_ = line_;
        } else {
          result.line_ = lineBuilder_.build();
        }
      }

      private void buildPartial0(com.google.perftools.profiles.ProfileProto.Location result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.id_ = id_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.mappingId_ = mappingId_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.address_ = address_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.isFolded_ = isFolded_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.perftools.profiles.ProfileProto.Location) {
          return mergeFrom((com.google.perftools.profiles.ProfileProto.Location)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.perftools.profiles.ProfileProto.Location other) {
        if (other == com.google.perftools.profiles.ProfileProto.Location.getDefaultInstance()) return this;
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (other.getMappingId() != 0L) {
          setMappingId(other.getMappingId());
        }
        if (other.getAddress() != 0L) {
          setAddress(other.getAddress());
        }
        if (lineBuilder_ == null) {
          if (!other.line_.isEmpty()) {
            if (line_.isEmpty()) {
              line_ = other.line_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureLineIsMutable();
              line_.addAll(other.line_);
            }
            onChanged();
          }
        } else {
          if (!other.line_.isEmpty()) {
            if (lineBuilder_.isEmpty()) {
              lineBuilder_.dispose();
              lineBuilder_ = null;
              line_ = other.line_;
              bitField0_ = (bitField0_ & ~0x00000008);
              lineBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   internalGetLineFieldBuilder() : null;
            } else {
              lineBuilder_.addAllMessages(other.line_);
            }
          }
        }
        if (other.getIsFolded() != false) {
          setIsFolded(other.getIsFolded());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                mappingId_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                address_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                com.google.perftools.profiles.ProfileProto.Line m =
                    input.readMessage(
                        com.google.perftools.profiles.ProfileProto.Line.parser(),
                        extensionRegistry);
                if (lineBuilder_ == null) {
                  ensureLineIsMutable();
                  line_.add(m);
                } else {
                  lineBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 40: {
                isFolded_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long id_ ;
      /**
       * <pre>
       * Unique nonzero id for the location.  A profile could use
       * instruction addresses or any integer sequence as ids.
       * </pre>
       *
       * <code>uint64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * Unique nonzero id for the location.  A profile could use
       * instruction addresses or any integer sequence as ids.
       * </pre>
       *
       * <code>uint64 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {

        id_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique nonzero id for the location.  A profile could use
       * instruction addresses or any integer sequence as ids.
       * </pre>
       *
       * <code>uint64 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        onChanged();
        return this;
      }

      private long mappingId_ ;
      /**
       * <pre>
       * The id of the corresponding profile.Mapping for this location.
       * It can be unset if the mapping is unknown or not applicable for
       * this profile type.
       * </pre>
       *
       * <code>uint64 mapping_id = 2;</code>
       * @return The mappingId.
       */
      @java.lang.Override
      public long getMappingId() {
        return mappingId_;
      }
      /**
       * <pre>
       * The id of the corresponding profile.Mapping for this location.
       * It can be unset if the mapping is unknown or not applicable for
       * this profile type.
       * </pre>
       *
       * <code>uint64 mapping_id = 2;</code>
       * @param value The mappingId to set.
       * @return This builder for chaining.
       */
      public Builder setMappingId(long value) {

        mappingId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The id of the corresponding profile.Mapping for this location.
       * It can be unset if the mapping is unknown or not applicable for
       * this profile type.
       * </pre>
       *
       * <code>uint64 mapping_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMappingId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mappingId_ = 0L;
        onChanged();
        return this;
      }

      private long address_ ;
      /**
       * <pre>
       * The instruction address for this location, if available.  It
       * should be within [Mapping.memory_start...Mapping.memory_limit]
       * for the corresponding mapping. A non-leaf address may be in the
       * middle of a call instruction. It is up to display tools to find
       * the beginning of the instruction if necessary.
       * </pre>
       *
       * <code>uint64 address = 3;</code>
       * @return The address.
       */
      @java.lang.Override
      public long getAddress() {
        return address_;
      }
      /**
       * <pre>
       * The instruction address for this location, if available.  It
       * should be within [Mapping.memory_start...Mapping.memory_limit]
       * for the corresponding mapping. A non-leaf address may be in the
       * middle of a call instruction. It is up to display tools to find
       * the beginning of the instruction if necessary.
       * </pre>
       *
       * <code>uint64 address = 3;</code>
       * @param value The address to set.
       * @return This builder for chaining.
       */
      public Builder setAddress(long value) {

        address_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The instruction address for this location, if available.  It
       * should be within [Mapping.memory_start...Mapping.memory_limit]
       * for the corresponding mapping. A non-leaf address may be in the
       * middle of a call instruction. It is up to display tools to find
       * the beginning of the instruction if necessary.
       * </pre>
       *
       * <code>uint64 address = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAddress() {
        bitField0_ = (bitField0_ & ~0x00000004);
        address_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<com.google.perftools.profiles.ProfileProto.Line> line_ =
        java.util.Collections.emptyList();
      private void ensureLineIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          line_ = new java.util.ArrayList<com.google.perftools.profiles.ProfileProto.Line>(line_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Line, com.google.perftools.profiles.ProfileProto.Line.Builder, com.google.perftools.profiles.ProfileProto.LineOrBuilder> lineBuilder_;

      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Line> getLineList() {
        if (lineBuilder_ == null) {
          return java.util.Collections.unmodifiableList(line_);
        } else {
          return lineBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public int getLineCount() {
        if (lineBuilder_ == null) {
          return line_.size();
        } else {
          return lineBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Line getLine(int index) {
        if (lineBuilder_ == null) {
          return line_.get(index);
        } else {
          return lineBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public Builder setLine(
          int index, com.google.perftools.profiles.ProfileProto.Line value) {
        if (lineBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLineIsMutable();
          line_.set(index, value);
          onChanged();
        } else {
          lineBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public Builder setLine(
          int index, com.google.perftools.profiles.ProfileProto.Line.Builder builderForValue) {
        if (lineBuilder_ == null) {
          ensureLineIsMutable();
          line_.set(index, builderForValue.build());
          onChanged();
        } else {
          lineBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public Builder addLine(com.google.perftools.profiles.ProfileProto.Line value) {
        if (lineBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLineIsMutable();
          line_.add(value);
          onChanged();
        } else {
          lineBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public Builder addLine(
          int index, com.google.perftools.profiles.ProfileProto.Line value) {
        if (lineBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLineIsMutable();
          line_.add(index, value);
          onChanged();
        } else {
          lineBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public Builder addLine(
          com.google.perftools.profiles.ProfileProto.Line.Builder builderForValue) {
        if (lineBuilder_ == null) {
          ensureLineIsMutable();
          line_.add(builderForValue.build());
          onChanged();
        } else {
          lineBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public Builder addLine(
          int index, com.google.perftools.profiles.ProfileProto.Line.Builder builderForValue) {
        if (lineBuilder_ == null) {
          ensureLineIsMutable();
          line_.add(index, builderForValue.build());
          onChanged();
        } else {
          lineBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public Builder addAllLine(
          java.lang.Iterable<? extends com.google.perftools.profiles.ProfileProto.Line> values) {
        if (lineBuilder_ == null) {
          ensureLineIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, line_);
          onChanged();
        } else {
          lineBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public Builder clearLine() {
        if (lineBuilder_ == null) {
          line_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          lineBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public Builder removeLine(int index) {
        if (lineBuilder_ == null) {
          ensureLineIsMutable();
          line_.remove(index);
          onChanged();
        } else {
          lineBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Line.Builder getLineBuilder(
          int index) {
        return internalGetLineFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.LineOrBuilder getLineOrBuilder(
          int index) {
        if (lineBuilder_ == null) {
          return line_.get(index);  } else {
          return lineBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public java.util.List<? extends com.google.perftools.profiles.ProfileProto.LineOrBuilder> 
           getLineOrBuilderList() {
        if (lineBuilder_ != null) {
          return lineBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(line_);
        }
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Line.Builder addLineBuilder() {
        return internalGetLineFieldBuilder().addBuilder(
            com.google.perftools.profiles.ProfileProto.Line.getDefaultInstance());
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public com.google.perftools.profiles.ProfileProto.Line.Builder addLineBuilder(
          int index) {
        return internalGetLineFieldBuilder().addBuilder(
            index, com.google.perftools.profiles.ProfileProto.Line.getDefaultInstance());
      }
      /**
       * <pre>
       * Multiple line indicates this location has inlined functions,
       * where the last entry represents the caller into which the
       * preceding entries were inlined.
       *
       * E.g., if memcpy() is inlined into printf:
       * line[0].function_name == "memcpy"
       * line[1].function_name == "printf"
       * </pre>
       *
       * <code>repeated .perftools.profiles.Line line = 4;</code>
       */
      public java.util.List<com.google.perftools.profiles.ProfileProto.Line.Builder> 
           getLineBuilderList() {
        return internalGetLineFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.google.perftools.profiles.ProfileProto.Line, com.google.perftools.profiles.ProfileProto.Line.Builder, com.google.perftools.profiles.ProfileProto.LineOrBuilder> 
          internalGetLineFieldBuilder() {
        if (lineBuilder_ == null) {
          lineBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.google.perftools.profiles.ProfileProto.Line, com.google.perftools.profiles.ProfileProto.Line.Builder, com.google.perftools.profiles.ProfileProto.LineOrBuilder>(
                  line_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          line_ = null;
        }
        return lineBuilder_;
      }

      private boolean isFolded_ ;
      /**
       * <pre>
       * Provides an indication that multiple symbols map to this location's
       * address, for example due to identical code folding by the linker. In that
       * case the line information above represents one of the multiple
       * symbols. This field must be recomputed when the symbolization state of the
       * profile changes.
       * </pre>
       *
       * <code>bool is_folded = 5;</code>
       * @return The isFolded.
       */
      @java.lang.Override
      public boolean getIsFolded() {
        return isFolded_;
      }
      /**
       * <pre>
       * Provides an indication that multiple symbols map to this location's
       * address, for example due to identical code folding by the linker. In that
       * case the line information above represents one of the multiple
       * symbols. This field must be recomputed when the symbolization state of the
       * profile changes.
       * </pre>
       *
       * <code>bool is_folded = 5;</code>
       * @param value The isFolded to set.
       * @return This builder for chaining.
       */
      public Builder setIsFolded(boolean value) {

        isFolded_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provides an indication that multiple symbols map to this location's
       * address, for example due to identical code folding by the linker. In that
       * case the line information above represents one of the multiple
       * symbols. This field must be recomputed when the symbolization state of the
       * profile changes.
       * </pre>
       *
       * <code>bool is_folded = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsFolded() {
        bitField0_ = (bitField0_ & ~0x00000010);
        isFolded_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perftools.profiles.Location)
    }

    // @@protoc_insertion_point(class_scope:perftools.profiles.Location)
    private static final com.google.perftools.profiles.ProfileProto.Location DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.perftools.profiles.ProfileProto.Location();
    }

    public static com.google.perftools.profiles.ProfileProto.Location getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Location>
        PARSER = new com.google.protobuf.AbstractParser<Location>() {
      @java.lang.Override
      public Location parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Location> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Location> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Location getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LineOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perftools.profiles.Line)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The id of the corresponding profile.Function for this line.
     * </pre>
     *
     * <code>uint64 function_id = 1;</code>
     * @return The functionId.
     */
    long getFunctionId();

    /**
     * <pre>
     * Line number in source code.
     * </pre>
     *
     * <code>int64 line = 2;</code>
     * @return The line.
     */
    long getLine();

    /**
     * <pre>
     * Column number in source code.
     * </pre>
     *
     * <code>int64 column = 3;</code>
     * @return The column.
     */
    long getColumn();
  }
  /**
   * Protobuf type {@code perftools.profiles.Line}
   */
  public static final class Line extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perftools.profiles.Line)
      LineOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 30,
        /* patch= */ 2,
        /* suffix= */ "",
        Line.class.getName());
    }
    // Use Line.newBuilder() to construct.
    private Line(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Line() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Line_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Line_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.perftools.profiles.ProfileProto.Line.class, com.google.perftools.profiles.ProfileProto.Line.Builder.class);
    }

    public static final int FUNCTION_ID_FIELD_NUMBER = 1;
    private long functionId_ = 0L;
    /**
     * <pre>
     * The id of the corresponding profile.Function for this line.
     * </pre>
     *
     * <code>uint64 function_id = 1;</code>
     * @return The functionId.
     */
    @java.lang.Override
    public long getFunctionId() {
      return functionId_;
    }

    public static final int LINE_FIELD_NUMBER = 2;
    private long line_ = 0L;
    /**
     * <pre>
     * Line number in source code.
     * </pre>
     *
     * <code>int64 line = 2;</code>
     * @return The line.
     */
    @java.lang.Override
    public long getLine() {
      return line_;
    }

    public static final int COLUMN_FIELD_NUMBER = 3;
    private long column_ = 0L;
    /**
     * <pre>
     * Column number in source code.
     * </pre>
     *
     * <code>int64 column = 3;</code>
     * @return The column.
     */
    @java.lang.Override
    public long getColumn() {
      return column_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (functionId_ != 0L) {
        output.writeUInt64(1, functionId_);
      }
      if (line_ != 0L) {
        output.writeInt64(2, line_);
      }
      if (column_ != 0L) {
        output.writeInt64(3, column_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (functionId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, functionId_);
      }
      if (line_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, line_);
      }
      if (column_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, column_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.perftools.profiles.ProfileProto.Line)) {
        return super.equals(obj);
      }
      com.google.perftools.profiles.ProfileProto.Line other = (com.google.perftools.profiles.ProfileProto.Line) obj;

      if (getFunctionId()
          != other.getFunctionId()) return false;
      if (getLine()
          != other.getLine()) return false;
      if (getColumn()
          != other.getColumn()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + FUNCTION_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFunctionId());
      hash = (37 * hash) + LINE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLine());
      hash = (37 * hash) + COLUMN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getColumn());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.perftools.profiles.ProfileProto.Line parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.perftools.profiles.ProfileProto.Line parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Line parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.perftools.profiles.ProfileProto.Line prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perftools.profiles.Line}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perftools.profiles.Line)
        com.google.perftools.profiles.ProfileProto.LineOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Line_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Line_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.perftools.profiles.ProfileProto.Line.class, com.google.perftools.profiles.ProfileProto.Line.Builder.class);
      }

      // Construct using com.google.perftools.profiles.ProfileProto.Line.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        functionId_ = 0L;
        line_ = 0L;
        column_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Line_descriptor;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Line getDefaultInstanceForType() {
        return com.google.perftools.profiles.ProfileProto.Line.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Line build() {
        com.google.perftools.profiles.ProfileProto.Line result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Line buildPartial() {
        com.google.perftools.profiles.ProfileProto.Line result = new com.google.perftools.profiles.ProfileProto.Line(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.perftools.profiles.ProfileProto.Line result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.functionId_ = functionId_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.line_ = line_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.column_ = column_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.perftools.profiles.ProfileProto.Line) {
          return mergeFrom((com.google.perftools.profiles.ProfileProto.Line)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.perftools.profiles.ProfileProto.Line other) {
        if (other == com.google.perftools.profiles.ProfileProto.Line.getDefaultInstance()) return this;
        if (other.getFunctionId() != 0L) {
          setFunctionId(other.getFunctionId());
        }
        if (other.getLine() != 0L) {
          setLine(other.getLine());
        }
        if (other.getColumn() != 0L) {
          setColumn(other.getColumn());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                functionId_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                line_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                column_ = input.readInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long functionId_ ;
      /**
       * <pre>
       * The id of the corresponding profile.Function for this line.
       * </pre>
       *
       * <code>uint64 function_id = 1;</code>
       * @return The functionId.
       */
      @java.lang.Override
      public long getFunctionId() {
        return functionId_;
      }
      /**
       * <pre>
       * The id of the corresponding profile.Function for this line.
       * </pre>
       *
       * <code>uint64 function_id = 1;</code>
       * @param value The functionId to set.
       * @return This builder for chaining.
       */
      public Builder setFunctionId(long value) {

        functionId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The id of the corresponding profile.Function for this line.
       * </pre>
       *
       * <code>uint64 function_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFunctionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        functionId_ = 0L;
        onChanged();
        return this;
      }

      private long line_ ;
      /**
       * <pre>
       * Line number in source code.
       * </pre>
       *
       * <code>int64 line = 2;</code>
       * @return The line.
       */
      @java.lang.Override
      public long getLine() {
        return line_;
      }
      /**
       * <pre>
       * Line number in source code.
       * </pre>
       *
       * <code>int64 line = 2;</code>
       * @param value The line to set.
       * @return This builder for chaining.
       */
      public Builder setLine(long value) {

        line_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Line number in source code.
       * </pre>
       *
       * <code>int64 line = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLine() {
        bitField0_ = (bitField0_ & ~0x00000002);
        line_ = 0L;
        onChanged();
        return this;
      }

      private long column_ ;
      /**
       * <pre>
       * Column number in source code.
       * </pre>
       *
       * <code>int64 column = 3;</code>
       * @return The column.
       */
      @java.lang.Override
      public long getColumn() {
        return column_;
      }
      /**
       * <pre>
       * Column number in source code.
       * </pre>
       *
       * <code>int64 column = 3;</code>
       * @param value The column to set.
       * @return This builder for chaining.
       */
      public Builder setColumn(long value) {

        column_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Column number in source code.
       * </pre>
       *
       * <code>int64 column = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearColumn() {
        bitField0_ = (bitField0_ & ~0x00000004);
        column_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perftools.profiles.Line)
    }

    // @@protoc_insertion_point(class_scope:perftools.profiles.Line)
    private static final com.google.perftools.profiles.ProfileProto.Line DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.perftools.profiles.ProfileProto.Line();
    }

    public static com.google.perftools.profiles.ProfileProto.Line getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Line>
        PARSER = new com.google.protobuf.AbstractParser<Line>() {
      @java.lang.Override
      public Line parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Line> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Line> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Line getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FunctionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perftools.profiles.Function)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Unique nonzero id for the function.
     * </pre>
     *
     * <code>uint64 id = 1;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * Name of the function, in human-readable form if available.
     * </pre>
     *
     * <code>int64 name = 2;</code>
     * @return The name.
     */
    long getName();

    /**
     * <pre>
     * Name of the function, as identified by the system.
     * For instance, it can be a C++ mangled name.
     * </pre>
     *
     * <code>int64 system_name = 3;</code>
     * @return The systemName.
     */
    long getSystemName();

    /**
     * <pre>
     * Source file containing the function.
     * </pre>
     *
     * <code>int64 filename = 4;</code>
     * @return The filename.
     */
    long getFilename();

    /**
     * <pre>
     * Line number in source file.
     * </pre>
     *
     * <code>int64 start_line = 5;</code>
     * @return The startLine.
     */
    long getStartLine();
  }
  /**
   * Protobuf type {@code perftools.profiles.Function}
   */
  public static final class Function extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perftools.profiles.Function)
      FunctionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 30,
        /* patch= */ 2,
        /* suffix= */ "",
        Function.class.getName());
    }
    // Use Function.newBuilder() to construct.
    private Function(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Function() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Function_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Function_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.perftools.profiles.ProfileProto.Function.class, com.google.perftools.profiles.ProfileProto.Function.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private long id_ = 0L;
    /**
     * <pre>
     * Unique nonzero id for the function.
     * </pre>
     *
     * <code>uint64 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private long name_ = 0L;
    /**
     * <pre>
     * Name of the function, in human-readable form if available.
     * </pre>
     *
     * <code>int64 name = 2;</code>
     * @return The name.
     */
    @java.lang.Override
    public long getName() {
      return name_;
    }

    public static final int SYSTEM_NAME_FIELD_NUMBER = 3;
    private long systemName_ = 0L;
    /**
     * <pre>
     * Name of the function, as identified by the system.
     * For instance, it can be a C++ mangled name.
     * </pre>
     *
     * <code>int64 system_name = 3;</code>
     * @return The systemName.
     */
    @java.lang.Override
    public long getSystemName() {
      return systemName_;
    }

    public static final int FILENAME_FIELD_NUMBER = 4;
    private long filename_ = 0L;
    /**
     * <pre>
     * Source file containing the function.
     * </pre>
     *
     * <code>int64 filename = 4;</code>
     * @return The filename.
     */
    @java.lang.Override
    public long getFilename() {
      return filename_;
    }

    public static final int START_LINE_FIELD_NUMBER = 5;
    private long startLine_ = 0L;
    /**
     * <pre>
     * Line number in source file.
     * </pre>
     *
     * <code>int64 start_line = 5;</code>
     * @return The startLine.
     */
    @java.lang.Override
    public long getStartLine() {
      return startLine_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0L) {
        output.writeUInt64(1, id_);
      }
      if (name_ != 0L) {
        output.writeInt64(2, name_);
      }
      if (systemName_ != 0L) {
        output.writeInt64(3, systemName_);
      }
      if (filename_ != 0L) {
        output.writeInt64(4, filename_);
      }
      if (startLine_ != 0L) {
        output.writeInt64(5, startLine_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, id_);
      }
      if (name_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, name_);
      }
      if (systemName_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, systemName_);
      }
      if (filename_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, filename_);
      }
      if (startLine_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, startLine_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.perftools.profiles.ProfileProto.Function)) {
        return super.equals(obj);
      }
      com.google.perftools.profiles.ProfileProto.Function other = (com.google.perftools.profiles.ProfileProto.Function) obj;

      if (getId()
          != other.getId()) return false;
      if (getName()
          != other.getName()) return false;
      if (getSystemName()
          != other.getSystemName()) return false;
      if (getFilename()
          != other.getFilename()) return false;
      if (getStartLine()
          != other.getStartLine()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getId());
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getName());
      hash = (37 * hash) + SYSTEM_NAME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSystemName());
      hash = (37 * hash) + FILENAME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getFilename());
      hash = (37 * hash) + START_LINE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartLine());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.google.perftools.profiles.ProfileProto.Function parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.google.perftools.profiles.ProfileProto.Function parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.google.perftools.profiles.ProfileProto.Function parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.perftools.profiles.ProfileProto.Function prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perftools.profiles.Function}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perftools.profiles.Function)
        com.google.perftools.profiles.ProfileProto.FunctionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Function_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Function_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.perftools.profiles.ProfileProto.Function.class, com.google.perftools.profiles.ProfileProto.Function.Builder.class);
      }

      // Construct using com.google.perftools.profiles.ProfileProto.Function.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        id_ = 0L;
        name_ = 0L;
        systemName_ = 0L;
        filename_ = 0L;
        startLine_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.perftools.profiles.ProfileProto.internal_static_perftools_profiles_Function_descriptor;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Function getDefaultInstanceForType() {
        return com.google.perftools.profiles.ProfileProto.Function.getDefaultInstance();
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Function build() {
        com.google.perftools.profiles.ProfileProto.Function result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.google.perftools.profiles.ProfileProto.Function buildPartial() {
        com.google.perftools.profiles.ProfileProto.Function result = new com.google.perftools.profiles.ProfileProto.Function(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.google.perftools.profiles.ProfileProto.Function result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.id_ = id_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.name_ = name_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.systemName_ = systemName_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.filename_ = filename_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.startLine_ = startLine_;
        }
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.perftools.profiles.ProfileProto.Function) {
          return mergeFrom((com.google.perftools.profiles.ProfileProto.Function)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.perftools.profiles.ProfileProto.Function other) {
        if (other == com.google.perftools.profiles.ProfileProto.Function.getDefaultInstance()) return this;
        if (other.getId() != 0L) {
          setId(other.getId());
        }
        if (other.getName() != 0L) {
          setName(other.getName());
        }
        if (other.getSystemName() != 0L) {
          setSystemName(other.getSystemName());
        }
        if (other.getFilename() != 0L) {
          setFilename(other.getFilename());
        }
        if (other.getStartLine() != 0L) {
          setStartLine(other.getStartLine());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                name_ = input.readInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                systemName_ = input.readInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                filename_ = input.readInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                startLine_ = input.readInt64();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long id_ ;
      /**
       * <pre>
       * Unique nonzero id for the function.
       * </pre>
       *
       * <code>uint64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * Unique nonzero id for the function.
       * </pre>
       *
       * <code>uint64 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {

        id_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique nonzero id for the function.
       * </pre>
       *
       * <code>uint64 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
        onChanged();
        return this;
      }

      private long name_ ;
      /**
       * <pre>
       * Name of the function, in human-readable form if available.
       * </pre>
       *
       * <code>int64 name = 2;</code>
       * @return The name.
       */
      @java.lang.Override
      public long getName() {
        return name_;
      }
      /**
       * <pre>
       * Name of the function, in human-readable form if available.
       * </pre>
       *
       * <code>int64 name = 2;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(long value) {

        name_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the function, in human-readable form if available.
       * </pre>
       *
       * <code>int64 name = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = 0L;
        onChanged();
        return this;
      }

      private long systemName_ ;
      /**
       * <pre>
       * Name of the function, as identified by the system.
       * For instance, it can be a C++ mangled name.
       * </pre>
       *
       * <code>int64 system_name = 3;</code>
       * @return The systemName.
       */
      @java.lang.Override
      public long getSystemName() {
        return systemName_;
      }
      /**
       * <pre>
       * Name of the function, as identified by the system.
       * For instance, it can be a C++ mangled name.
       * </pre>
       *
       * <code>int64 system_name = 3;</code>
       * @param value The systemName to set.
       * @return This builder for chaining.
       */
      public Builder setSystemName(long value) {

        systemName_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the function, as identified by the system.
       * For instance, it can be a C++ mangled name.
       * </pre>
       *
       * <code>int64 system_name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSystemName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        systemName_ = 0L;
        onChanged();
        return this;
      }

      private long filename_ ;
      /**
       * <pre>
       * Source file containing the function.
       * </pre>
       *
       * <code>int64 filename = 4;</code>
       * @return The filename.
       */
      @java.lang.Override
      public long getFilename() {
        return filename_;
      }
      /**
       * <pre>
       * Source file containing the function.
       * </pre>
       *
       * <code>int64 filename = 4;</code>
       * @param value The filename to set.
       * @return This builder for chaining.
       */
      public Builder setFilename(long value) {

        filename_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Source file containing the function.
       * </pre>
       *
       * <code>int64 filename = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearFilename() {
        bitField0_ = (bitField0_ & ~0x00000008);
        filename_ = 0L;
        onChanged();
        return this;
      }

      private long startLine_ ;
      /**
       * <pre>
       * Line number in source file.
       * </pre>
       *
       * <code>int64 start_line = 5;</code>
       * @return The startLine.
       */
      @java.lang.Override
      public long getStartLine() {
        return startLine_;
      }
      /**
       * <pre>
       * Line number in source file.
       * </pre>
       *
       * <code>int64 start_line = 5;</code>
       * @param value The startLine to set.
       * @return This builder for chaining.
       */
      public Builder setStartLine(long value) {

        startLine_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Line number in source file.
       * </pre>
       *
       * <code>int64 start_line = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartLine() {
        bitField0_ = (bitField0_ & ~0x00000010);
        startLine_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:perftools.profiles.Function)
    }

    // @@protoc_insertion_point(class_scope:perftools.profiles.Function)
    private static final com.google.perftools.profiles.ProfileProto.Function DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.perftools.profiles.ProfileProto.Function();
    }

    public static com.google.perftools.profiles.ProfileProto.Function getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Function>
        PARSER = new com.google.protobuf.AbstractParser<Function>() {
      @java.lang.Override
      public Function parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Function> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Function> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.perftools.profiles.ProfileProto.Function getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perftools_profiles_Profile_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perftools_profiles_Profile_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perftools_profiles_ValueType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perftools_profiles_ValueType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perftools_profiles_Sample_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perftools_profiles_Sample_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perftools_profiles_Label_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perftools_profiles_Label_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perftools_profiles_Mapping_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perftools_profiles_Mapping_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perftools_profiles_Location_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perftools_profiles_Location_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perftools_profiles_Line_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perftools_profiles_Line_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perftools_profiles_Function_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perftools_profiles_Function_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rprofile.proto\022\022perftools.profiles\"\346\003\n\007" +
      "Profile\0222\n\013sample_type\030\001 \003(\0132\035.perftools" +
      ".profiles.ValueType\022*\n\006sample\030\002 \003(\0132\032.pe" +
      "rftools.profiles.Sample\022,\n\007mapping\030\003 \003(\013" +
      "2\033.perftools.profiles.Mapping\022.\n\010locatio" +
      "n\030\004 \003(\0132\034.perftools.profiles.Location\022.\n" +
      "\010function\030\005 \003(\0132\034.perftools.profiles.Fun" +
      "ction\022\024\n\014string_table\030\006 \003(\t\022\023\n\013drop_fram" +
      "es\030\007 \001(\003\022\023\n\013keep_frames\030\010 \001(\003\022\022\n\ntime_na" +
      "nos\030\t \001(\003\022\026\n\016duration_nanos\030\n \001(\003\0222\n\013per" +
      "iod_type\030\013 \001(\0132\035.perftools.profiles.Valu" +
      "eType\022\016\n\006period\030\014 \001(\003\022\017\n\007comment\030\r \003(\003\022\033" +
      "\n\023default_sample_type\030\016 \001(\003\022\017\n\007doc_url\030\017" +
      " \001(\003\"\'\n\tValueType\022\014\n\004type\030\001 \001(\003\022\014\n\004unit\030" +
      "\002 \001(\003\"V\n\006Sample\022\023\n\013location_id\030\001 \003(\004\022\r\n\005" +
      "value\030\002 \003(\003\022(\n\005label\030\003 \003(\0132\031.perftools.p" +
      "rofiles.Label\"@\n\005Label\022\013\n\003key\030\001 \001(\003\022\013\n\003s" +
      "tr\030\002 \001(\003\022\013\n\003num\030\003 \001(\003\022\020\n\010num_unit\030\004 \001(\003\"" +
      "\335\001\n\007Mapping\022\n\n\002id\030\001 \001(\004\022\024\n\014memory_start\030" +
      "\002 \001(\004\022\024\n\014memory_limit\030\003 \001(\004\022\023\n\013file_offs" +
      "et\030\004 \001(\004\022\020\n\010filename\030\005 \001(\003\022\020\n\010build_id\030\006" +
      " \001(\003\022\025\n\rhas_functions\030\007 \001(\010\022\025\n\rhas_filen" +
      "ames\030\010 \001(\010\022\030\n\020has_line_numbers\030\t \001(\010\022\031\n\021" +
      "has_inline_frames\030\n \001(\010\"v\n\010Location\022\n\n\002i" +
      "d\030\001 \001(\004\022\022\n\nmapping_id\030\002 \001(\004\022\017\n\007address\030\003" +
      " \001(\004\022&\n\004line\030\004 \003(\0132\030.perftools.profiles." +
      "Line\022\021\n\tis_folded\030\005 \001(\010\"9\n\004Line\022\023\n\013funct" +
      "ion_id\030\001 \001(\004\022\014\n\004line\030\002 \001(\003\022\016\n\006column\030\003 \001" +
      "(\003\"_\n\010Function\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\003" +
      "\022\023\n\013system_name\030\003 \001(\003\022\020\n\010filename\030\004 \001(\003\022" +
      "\022\n\nstart_line\030\005 \001(\003B-\n\035com.google.perfto" +
      "ols.profilesB\014ProfileProtob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_perftools_profiles_Profile_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perftools_profiles_Profile_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perftools_profiles_Profile_descriptor,
        new java.lang.String[] { "SampleType", "Sample", "Mapping", "Location", "Function", "StringTable", "DropFrames", "KeepFrames", "TimeNanos", "DurationNanos", "PeriodType", "Period", "Comment", "DefaultSampleType", "DocUrl", });
    internal_static_perftools_profiles_ValueType_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_perftools_profiles_ValueType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perftools_profiles_ValueType_descriptor,
        new java.lang.String[] { "Type", "Unit", });
    internal_static_perftools_profiles_Sample_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_perftools_profiles_Sample_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perftools_profiles_Sample_descriptor,
        new java.lang.String[] { "LocationId", "Value", "Label", });
    internal_static_perftools_profiles_Label_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_perftools_profiles_Label_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perftools_profiles_Label_descriptor,
        new java.lang.String[] { "Key", "Str", "Num", "NumUnit", });
    internal_static_perftools_profiles_Mapping_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_perftools_profiles_Mapping_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perftools_profiles_Mapping_descriptor,
        new java.lang.String[] { "Id", "MemoryStart", "MemoryLimit", "FileOffset", "Filename", "BuildId", "HasFunctions", "HasFilenames", "HasLineNumbers", "HasInlineFrames", });
    internal_static_perftools_profiles_Location_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_perftools_profiles_Location_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perftools_profiles_Location_descriptor,
        new java.lang.String[] { "Id", "MappingId", "Address", "Line", "IsFolded", });
    internal_static_perftools_profiles_Line_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_perftools_profiles_Line_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perftools_profiles_Line_descriptor,
        new java.lang.String[] { "FunctionId", "Line", "Column", });
    internal_static_perftools_profiles_Function_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_perftools_profiles_Function_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perftools_profiles_Function_descriptor,
        new java.lang.String[] { "Id", "Name", "SystemName", "Filename", "StartLine", });
    descriptor.resolveAllFeaturesImmutable();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
